{"ast":null,"code":"var _jsxFileName = \"/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/src/components/NetworkGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport { apiUrl } from '../config';\nimport '../styles/NetworkGraph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = {\n  igp_node: '#CC4A04',\n  // Cayenne orange for IGP nodes\n  bgp_node: '#1E88E5',\n  // Blue for BGP nodes\n  prefix: '#002921',\n  // Dark green for all prefix types\n  text: '#000',\n  // Black text\n  edge: '#1a365d' // Blue edges\n};\ncytoscape.use(cola);\nconst NetworkGraph = ({\n  collection\n}) => {\n  _s();\n  const cyRef = useRef(null);\n  const [graphData, setGraphData] = useState(null);\n  const isPrefix = type => {\n    return type === 'ls_prefix' || type === 'bgp_prefix';\n  };\n\n  // Legend component definition\n  const Legend = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-legend\",\n    style: {\n      position: 'absolute',\n      top: '10px',\n      right: '10px',\n      background: 'white',\n      padding: '10px',\n      borderRadius: '5px',\n      boxShadow: '0 0 10px rgba(0,0,0,0.1)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        margin: '0 0 10px 0'\n      },\n      children: \"Legend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '5px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            width: '20px',\n            height: '20px',\n            backgroundColor: COLORS.igp_node,\n            display: 'inline-block',\n            borderRadius: '3px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"IGP Nodes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            width: '20px',\n            height: '20px',\n            backgroundColor: COLORS.bgp_node,\n            display: 'inline-block',\n            borderRadius: '3px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"BGP Nodes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            width: '20px',\n            height: '20px',\n            backgroundColor: COLORS.prefix,\n            display: 'inline-block',\n            borderRadius: '3px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Prefixes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n  const transformDataToCytoscape = data => {\n    const elements = [];\n    const processedEdges = new Set();\n\n    // First add all vertices\n    Object.entries(data.vertices).forEach(([id, vertex]) => {\n      let nodeColor = '#666666'; // default color\n      let nodeLabel = vertex.name || id; // default to name or id\n\n      if (id.includes('bgp_node')) {\n        nodeColor = '#014961';\n      } else if (id.includes('igp_node')) {\n        nodeColor = '#ff0000';\n      } else if (id.includes('ls_prefix')) {\n        nodeLabel = vertex.prefix; // Use prefix value for prefix nodes\n      }\n      elements.push({\n        group: 'nodes',\n        data: {\n          id: id,\n          label: nodeLabel,\n          type: vertex.collection,\n          color: nodeColor\n        }\n      });\n    });\n\n    // Then add edges, avoiding duplicates\n    data.edges.forEach(edge => {\n      if (edge._from && edge._to) {\n        // Create a canonical edge ID that's the same regardless of direction\n        const nodes = [edge._from, edge._to].sort();\n        const edgeId = `${nodes[0]}-${nodes[1]}`;\n        if (!processedEdges.has(edgeId)) {\n          processedEdges.add(edgeId);\n          elements.push({\n            group: 'edges',\n            data: {\n              id: edgeId,\n              source: edge._from,\n              target: edge._to\n            }\n          });\n        }\n      }\n    });\n    console.log('Transformed elements:', {\n      total: elements.length,\n      nodes: elements.filter(e => e.group === 'nodes').length,\n      edges: elements.filter(e => e.group === 'edges').length\n    });\n    return elements;\n  };\n\n  // Update the layout configuration\n  const layout = {\n    name: 'concentric',\n    concentric: function (node) {\n      // Place prefix nodes in outer circle\n      return node.data('id').includes('ls_prefix') ? 1 : 2;\n    },\n    levelWidth: function () {\n      return 1;\n    },\n    minNodeSpacing: 100,\n    // Increase spacing between nodes\n    spacingFactor: 1.5,\n    // Increase overall spacing\n    animate: true\n  };\n\n  // Update the style configuration\n  const style = [{\n    selector: 'node',\n    style: {\n      'background-color': 'data(color)',\n      'label': 'data(label)',\n      'width': 20,\n      'height': 20\n    }\n  }, {\n    selector: 'edge',\n    style: {\n      'width': 1,\n      'line-color': '#999999',\n      'curve-style': 'bezier',\n      'target-arrow-shape': 'none' // Remove arrows\n    }\n  }];\n  useEffect(() => {\n    console.log('Collection received:', {\n      collection,\n      type: typeof collection,\n      keys: collection ? Object.keys(collection) : 'none'\n    });\n    if (typeof collection === 'string') {\n      const baseUrl = process.env.REACT_APP_API_URL || '';\n      const endpoint = `${baseUrl}/api/v1/collections/${collection}/topology`;\n      console.log('Fetching topology from:', endpoint, {\n        baseUrl,\n        fullEndpoint: endpoint\n      });\n      fetch(endpoint).then(async response => {\n        // Log response details\n        console.log('Response received:', {\n          status: response.status,\n          statusText: response.statusText,\n          headers: Object.fromEntries(response.headers.entries()),\n          url: response.url\n        });\n\n        // Get the raw text first to see what we're dealing with\n        const text = await response.text();\n        console.log('Raw response:', text.substring(0, 500));\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        try {\n          return JSON.parse(text);\n        } catch (e) {\n          throw new Error(`Failed to parse JSON: ${text.substring(0, 200)}`);\n        }\n      }).then(data => {\n        console.log('Parsed topology data:', {\n          vertices: Object.keys(data.vertices).length,\n          edges: data.edges.length\n        });\n        const elements = transformDataToCytoscape(data);\n        setGraphData(elements);\n      }).catch(error => {\n        console.error('Error details:', {\n          message: error.message,\n          stack: error.stack,\n          endpoint: endpoint\n        });\n      });\n    }\n  }, [collection]);\n  useEffect(() => {\n    console.log('Graph data changed:', graphData);\n    if (cyRef.current && graphData) {\n      const cy = cyRef.current;\n      console.log('Applying layout to', cy.elements().length, 'elements');\n\n      // Run layouts sequentially\n      const nonPrefixNodes = cy.nodes().filter(node => !isPrefix(node.data('type')));\n      const prefixNodes = cy.nodes().filter(node => isPrefix(node.data('type')));\n      console.log('Node counts:', {\n        total: cy.nodes().length,\n        nonPrefix: nonPrefixNodes.length,\n        prefix: prefixNodes.length\n      });\n\n      // Position non-prefix nodes in a circle\n      nonPrefixNodes.layout({\n        name: 'circle',\n        animate: false,\n        padding: 50,\n        radius: 150,\n        startAngle: 3 / 2 * Math.PI,\n        sweep: 2 * Math.PI,\n        clockwise: true\n      }).run();\n\n      // Position prefix nodes in a line\n      const width = cy.width();\n      const height = cy.height();\n      prefixNodes.forEach((node, index) => {\n        const totalPrefixes = prefixNodes.length;\n        const prefixWidth = width * 0.8;\n        const startX = width * 0.1;\n        const x = startX + prefixWidth * index / (totalPrefixes - 1 || 1);\n        node.position({\n          x: x,\n          y: height * 0.8\n        });\n      });\n\n      // Fit the viewport\n      cy.fit(undefined, 50);\n    }\n  }, [graphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"network-graph\",\n    style: {\n      width: '100%',\n      height: '800px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(CytoscapeComponent, {\n      cy: cy => {\n        console.log('Cytoscape initialized');\n        cyRef.current = cy;\n      },\n      elements: graphData || [],\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      stylesheet: style,\n      userZoomingEnabled: true,\n      userPanningEnabled: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 5\n  }, this);\n};\n_s(NetworkGraph, \"E/8/QMImdjSaPUsH4myrgcssuf4=\");\n_c = NetworkGraph;\nexport default NetworkGraph;\nvar _c;\n$RefreshReg$(_c, \"NetworkGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","CytoscapeComponent","cytoscape","cola","apiUrl","jsxDEV","_jsxDEV","COLORS","igp_node","bgp_node","prefix","text","edge","use","NetworkGraph","collection","_s","cyRef","graphData","setGraphData","isPrefix","type","Legend","className","style","position","top","right","background","padding","borderRadius","boxShadow","children","margin","fileName","_jsxFileName","lineNumber","columnNumber","display","flexDirection","gap","alignItems","width","height","backgroundColor","transformDataToCytoscape","data","elements","processedEdges","Set","Object","entries","vertices","forEach","id","vertex","nodeColor","nodeLabel","name","includes","push","group","label","color","edges","_from","_to","nodes","sort","edgeId","has","add","source","target","console","log","total","length","filter","e","layout","concentric","node","levelWidth","minNodeSpacing","spacingFactor","animate","selector","keys","baseUrl","process","env","REACT_APP_API_URL","endpoint","fullEndpoint","fetch","then","response","status","statusText","headers","fromEntries","url","substring","ok","Error","JSON","parse","catch","error","message","stack","current","cy","nonPrefixNodes","prefixNodes","nonPrefix","radius","startAngle","Math","PI","sweep","clockwise","run","index","totalPrefixes","prefixWidth","startX","x","y","fit","undefined","stylesheet","userZoomingEnabled","userPanningEnabled","_c","$RefreshReg$"],"sources":["/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/src/components/NetworkGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport { apiUrl } from '../config';\nimport '../styles/NetworkGraph.css';\n\nconst COLORS = {\n  igp_node: '#CC4A04',    // Cayenne orange for IGP nodes\n  bgp_node: '#1E88E5',    // Blue for BGP nodes\n  prefix: '#002921',      // Dark green for all prefix types\n  text: '#000',           // Black text\n  edge: '#1a365d'         // Blue edges\n};\n\ncytoscape.use(cola);\n\nconst NetworkGraph = ({ collection }) => {\n  const cyRef = useRef(null);\n  const [graphData, setGraphData] = useState(null);\n\n  const isPrefix = (type) => {\n    return type === 'ls_prefix' || type === 'bgp_prefix';\n  };\n\n  // Legend component definition\n  const Legend = () => (\n    <div className=\"graph-legend\" style={{\n      position: 'absolute',\n      top: '10px',\n      right: '10px',\n      background: 'white',\n      padding: '10px',\n      borderRadius: '5px',\n      boxShadow: '0 0 10px rgba(0,0,0,0.1)'\n    }}>\n      <h3 style={{ margin: '0 0 10px 0' }}>Legend</h3>\n      <div style={{ display: 'flex', flexDirection: 'column', gap: '5px' }}>\n        <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>\n          <span style={{ \n            width: '20px', \n            height: '20px', \n            backgroundColor: COLORS.igp_node,\n            display: 'inline-block',\n            borderRadius: '3px'\n          }}></span>\n          <span>IGP Nodes</span>\n        </div>\n        <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>\n          <span style={{ \n            width: '20px', \n            height: '20px', \n            backgroundColor: COLORS.bgp_node,\n            display: 'inline-block',\n            borderRadius: '3px'\n          }}></span>\n          <span>BGP Nodes</span>\n        </div>\n        <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>\n          <span style={{ \n            width: '20px', \n            height: '20px', \n            backgroundColor: COLORS.prefix,\n            display: 'inline-block',\n            borderRadius: '3px'\n          }}></span>\n          <span>Prefixes</span>\n        </div>\n      </div>\n    </div>\n  );\n\n  const transformDataToCytoscape = (data) => {\n    const elements = [];\n    const processedEdges = new Set();\n    \n    // First add all vertices\n    Object.entries(data.vertices).forEach(([id, vertex]) => {\n      let nodeColor = '#666666'; // default color\n      let nodeLabel = vertex.name || id;  // default to name or id\n      \n      if (id.includes('bgp_node')) {\n        nodeColor = '#014961';\n      } else if (id.includes('igp_node')) {\n        nodeColor = '#ff0000';\n      } else if (id.includes('ls_prefix')) {\n        nodeLabel = vertex.prefix;  // Use prefix value for prefix nodes\n      }\n\n      elements.push({\n        group: 'nodes',\n        data: {\n          id: id,\n          label: nodeLabel,\n          type: vertex.collection,\n          color: nodeColor\n        }\n      });\n    });\n\n    // Then add edges, avoiding duplicates\n    data.edges.forEach(edge => {\n      if (edge._from && edge._to) {\n        // Create a canonical edge ID that's the same regardless of direction\n        const nodes = [edge._from, edge._to].sort();\n        const edgeId = `${nodes[0]}-${nodes[1]}`;\n        \n        if (!processedEdges.has(edgeId)) {\n          processedEdges.add(edgeId);\n          elements.push({\n            group: 'edges',\n            data: {\n              id: edgeId,\n              source: edge._from,\n              target: edge._to\n            }\n          });\n        }\n      }\n    });\n\n    console.log('Transformed elements:', {\n      total: elements.length,\n      nodes: elements.filter(e => e.group === 'nodes').length,\n      edges: elements.filter(e => e.group === 'edges').length\n    });\n\n    return elements;\n  };\n\n  // Update the layout configuration\n  const layout = {\n    name: 'concentric',\n    concentric: function(node) {\n      // Place prefix nodes in outer circle\n      return node.data('id').includes('ls_prefix') ? 1 : 2;\n    },\n    levelWidth: function() { return 1; },\n    minNodeSpacing: 100,  // Increase spacing between nodes\n    spacingFactor: 1.5,   // Increase overall spacing\n    animate: true\n  };\n\n  // Update the style configuration\n  const style = [\n    {\n      selector: 'node',\n      style: {\n        'background-color': 'data(color)',\n        'label': 'data(label)',\n        'width': 20,\n        'height': 20\n      }\n    },\n    {\n      selector: 'edge',\n      style: {\n        'width': 1,\n        'line-color': '#999999',\n        'curve-style': 'bezier',\n        'target-arrow-shape': 'none'  // Remove arrows\n      }\n    }\n  ];\n\n  useEffect(() => {\n    console.log('Collection received:', {\n      collection,\n      type: typeof collection,\n      keys: collection ? Object.keys(collection) : 'none'\n    });\n\n    if (typeof collection === 'string') {\n      const baseUrl = process.env.REACT_APP_API_URL || '';\n      const endpoint = `${baseUrl}/api/v1/collections/${collection}/topology`;\n      \n      console.log('Fetching topology from:', endpoint, {\n        baseUrl,\n        fullEndpoint: endpoint\n      });\n      \n      fetch(endpoint)\n        .then(async response => {\n          // Log response details\n          console.log('Response received:', {\n            status: response.status,\n            statusText: response.statusText,\n            headers: Object.fromEntries(response.headers.entries()),\n            url: response.url\n          });\n\n          // Get the raw text first to see what we're dealing with\n          const text = await response.text();\n          console.log('Raw response:', text.substring(0, 500));\n\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n\n          try {\n            return JSON.parse(text);\n          } catch (e) {\n            throw new Error(`Failed to parse JSON: ${text.substring(0, 200)}`);\n          }\n        })\n        .then(data => {\n          console.log('Parsed topology data:', {\n            vertices: Object.keys(data.vertices).length,\n            edges: data.edges.length\n          });\n          const elements = transformDataToCytoscape(data);\n          setGraphData(elements);\n        })\n        .catch(error => {\n          console.error('Error details:', {\n            message: error.message,\n            stack: error.stack,\n            endpoint: endpoint\n          });\n        });\n    }\n  }, [collection]);\n\n  useEffect(() => {\n    console.log('Graph data changed:', graphData);\n    if (cyRef.current && graphData) {\n      const cy = cyRef.current;\n      console.log('Applying layout to', cy.elements().length, 'elements');\n      \n      // Run layouts sequentially\n      const nonPrefixNodes = cy.nodes().filter(node => !isPrefix(node.data('type')));\n      const prefixNodes = cy.nodes().filter(node => isPrefix(node.data('type')));\n      \n      console.log('Node counts:', {\n        total: cy.nodes().length,\n        nonPrefix: nonPrefixNodes.length,\n        prefix: prefixNodes.length\n      });\n\n      // Position non-prefix nodes in a circle\n      nonPrefixNodes.layout({\n        name: 'circle',\n        animate: false,\n        padding: 50,\n        radius: 150,\n        startAngle: 3/2 * Math.PI,\n        sweep: 2 * Math.PI,\n        clockwise: true\n      }).run();\n\n      // Position prefix nodes in a line\n      const width = cy.width();\n      const height = cy.height();\n      \n      prefixNodes.forEach((node, index) => {\n        const totalPrefixes = prefixNodes.length;\n        const prefixWidth = width * 0.8;\n        const startX = width * 0.1;\n        const x = startX + (prefixWidth * index / (totalPrefixes - 1 || 1));\n        \n        node.position({\n          x: x,\n          y: height * 0.8\n        });\n      });\n\n      // Fit the viewport\n      cy.fit(undefined, 50);\n    }\n  }, [graphData]);\n\n  return (\n    <div className=\"network-graph\" style={{ width: '100%', height: '800px', position: 'relative' }}>\n      <CytoscapeComponent\n        cy={(cy) => { \n          console.log('Cytoscape initialized');\n          cyRef.current = cy;\n        }}\n        elements={graphData || []}\n        style={{ width: '100%', height: '100%' }}\n        stylesheet={style}\n        userZoomingEnabled={true}\n        userPanningEnabled={true}\n      />\n      <Legend />\n    </div>\n  );\n};\n\nexport default NetworkGraph; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}