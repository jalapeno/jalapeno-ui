{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TreeBase = function () {\n  function TreeBase() {\n    this.findIter = function (data) {\n      var res = this._root;\n      var iter = this.iterator();\n      while (res !== null) {\n        var c = this._comparator(data, res.data);\n        if (c === 0) {\n          iter._cursor = res;\n          return iter;\n        } else {\n          iter._ancestors.push(res);\n          res = res.get_child(c > 0);\n        }\n      }\n      return null;\n    };\n  }\n  TreeBase.prototype.clear = function () {\n    this._root = null;\n    this.size = 0;\n  };\n  ;\n  TreeBase.prototype.find = function (data) {\n    var res = this._root;\n    while (res !== null) {\n      var c = this._comparator(data, res.data);\n      if (c === 0) {\n        return res.data;\n      } else {\n        res = res.get_child(c > 0);\n      }\n    }\n    return null;\n  };\n  ;\n  TreeBase.prototype.lowerBound = function (data) {\n    return this._bound(data, this._comparator);\n  };\n  ;\n  TreeBase.prototype.upperBound = function (data) {\n    var cmp = this._comparator;\n    function reverse_cmp(a, b) {\n      return cmp(b, a);\n    }\n    return this._bound(data, reverse_cmp);\n  };\n  ;\n  TreeBase.prototype.min = function () {\n    var res = this._root;\n    if (res === null) {\n      return null;\n    }\n    while (res.left !== null) {\n      res = res.left;\n    }\n    return res.data;\n  };\n  ;\n  TreeBase.prototype.max = function () {\n    var res = this._root;\n    if (res === null) {\n      return null;\n    }\n    while (res.right !== null) {\n      res = res.right;\n    }\n    return res.data;\n  };\n  ;\n  TreeBase.prototype.iterator = function () {\n    return new Iterator(this);\n  };\n  ;\n  TreeBase.prototype.each = function (cb) {\n    var it = this.iterator(),\n      data;\n    while ((data = it.next()) !== null) {\n      cb(data);\n    }\n  };\n  ;\n  TreeBase.prototype.reach = function (cb) {\n    var it = this.iterator(),\n      data;\n    while ((data = it.prev()) !== null) {\n      cb(data);\n    }\n  };\n  ;\n  TreeBase.prototype._bound = function (data, cmp) {\n    var cur = this._root;\n    var iter = this.iterator();\n    while (cur !== null) {\n      var c = this._comparator(data, cur.data);\n      if (c === 0) {\n        iter._cursor = cur;\n        return iter;\n      }\n      iter._ancestors.push(cur);\n      cur = cur.get_child(c > 0);\n    }\n    for (var i = iter._ancestors.length - 1; i >= 0; --i) {\n      cur = iter._ancestors[i];\n      if (cmp(data, cur.data) > 0) {\n        iter._cursor = cur;\n        iter._ancestors.length = i;\n        return iter;\n      }\n    }\n    iter._ancestors.length = 0;\n    return iter;\n  };\n  ;\n  return TreeBase;\n}();\nexports.TreeBase = TreeBase;\nvar Iterator = function () {\n  function Iterator(tree) {\n    this._tree = tree;\n    this._ancestors = [];\n    this._cursor = null;\n  }\n  Iterator.prototype.data = function () {\n    return this._cursor !== null ? this._cursor.data : null;\n  };\n  ;\n  Iterator.prototype.next = function () {\n    if (this._cursor === null) {\n      var root = this._tree._root;\n      if (root !== null) {\n        this._minNode(root);\n      }\n    } else {\n      if (this._cursor.right === null) {\n        var save;\n        do {\n          save = this._cursor;\n          if (this._ancestors.length) {\n            this._cursor = this._ancestors.pop();\n          } else {\n            this._cursor = null;\n            break;\n          }\n        } while (this._cursor.right === save);\n      } else {\n        this._ancestors.push(this._cursor);\n        this._minNode(this._cursor.right);\n      }\n    }\n    return this._cursor !== null ? this._cursor.data : null;\n  };\n  ;\n  Iterator.prototype.prev = function () {\n    if (this._cursor === null) {\n      var root = this._tree._root;\n      if (root !== null) {\n        this._maxNode(root);\n      }\n    } else {\n      if (this._cursor.left === null) {\n        var save;\n        do {\n          save = this._cursor;\n          if (this._ancestors.length) {\n            this._cursor = this._ancestors.pop();\n          } else {\n            this._cursor = null;\n            break;\n          }\n        } while (this._cursor.left === save);\n      } else {\n        this._ancestors.push(this._cursor);\n        this._maxNode(this._cursor.left);\n      }\n    }\n    return this._cursor !== null ? this._cursor.data : null;\n  };\n  ;\n  Iterator.prototype._minNode = function (start) {\n    while (start.left !== null) {\n      this._ancestors.push(start);\n      start = start.left;\n    }\n    this._cursor = start;\n  };\n  ;\n  Iterator.prototype._maxNode = function (start) {\n    while (start.right !== null) {\n      this._ancestors.push(start);\n      start = start.right;\n    }\n    this._cursor = start;\n  };\n  ;\n  return Iterator;\n}();\nexports.Iterator = Iterator;\nvar Node = function () {\n  function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n    this.red = true;\n  }\n  Node.prototype.get_child = function (dir) {\n    return dir ? this.right : this.left;\n  };\n  ;\n  Node.prototype.set_child = function (dir, val) {\n    if (dir) {\n      this.right = val;\n    } else {\n      this.left = val;\n    }\n  };\n  ;\n  return Node;\n}();\nvar RBTree = function (_super) {\n  __extends(RBTree, _super);\n  function RBTree(comparator) {\n    var _this = _super.call(this) || this;\n    _this._root = null;\n    _this._comparator = comparator;\n    _this.size = 0;\n    return _this;\n  }\n  RBTree.prototype.insert = function (data) {\n    var ret = false;\n    if (this._root === null) {\n      this._root = new Node(data);\n      ret = true;\n      this.size++;\n    } else {\n      var head = new Node(undefined);\n      var dir = false;\n      var last = false;\n      var gp = null;\n      var ggp = head;\n      var p = null;\n      var node = this._root;\n      ggp.right = this._root;\n      while (true) {\n        if (node === null) {\n          node = new Node(data);\n          p.set_child(dir, node);\n          ret = true;\n          this.size++;\n        } else if (RBTree.is_red(node.left) && RBTree.is_red(node.right)) {\n          node.red = true;\n          node.left.red = false;\n          node.right.red = false;\n        }\n        if (RBTree.is_red(node) && RBTree.is_red(p)) {\n          var dir2 = ggp.right === gp;\n          if (node === p.get_child(last)) {\n            ggp.set_child(dir2, RBTree.single_rotate(gp, !last));\n          } else {\n            ggp.set_child(dir2, RBTree.double_rotate(gp, !last));\n          }\n        }\n        var cmp = this._comparator(node.data, data);\n        if (cmp === 0) {\n          break;\n        }\n        last = dir;\n        dir = cmp < 0;\n        if (gp !== null) {\n          ggp = gp;\n        }\n        gp = p;\n        p = node;\n        node = node.get_child(dir);\n      }\n      this._root = head.right;\n    }\n    this._root.red = false;\n    return ret;\n  };\n  ;\n  RBTree.prototype.remove = function (data) {\n    if (this._root === null) {\n      return false;\n    }\n    var head = new Node(undefined);\n    var node = head;\n    node.right = this._root;\n    var p = null;\n    var gp = null;\n    var found = null;\n    var dir = true;\n    while (node.get_child(dir) !== null) {\n      var last = dir;\n      gp = p;\n      p = node;\n      node = node.get_child(dir);\n      var cmp = this._comparator(data, node.data);\n      dir = cmp > 0;\n      if (cmp === 0) {\n        found = node;\n      }\n      if (!RBTree.is_red(node) && !RBTree.is_red(node.get_child(dir))) {\n        if (RBTree.is_red(node.get_child(!dir))) {\n          var sr = RBTree.single_rotate(node, dir);\n          p.set_child(last, sr);\n          p = sr;\n        } else if (!RBTree.is_red(node.get_child(!dir))) {\n          var sibling = p.get_child(!last);\n          if (sibling !== null) {\n            if (!RBTree.is_red(sibling.get_child(!last)) && !RBTree.is_red(sibling.get_child(last))) {\n              p.red = false;\n              sibling.red = true;\n              node.red = true;\n            } else {\n              var dir2 = gp.right === p;\n              if (RBTree.is_red(sibling.get_child(last))) {\n                gp.set_child(dir2, RBTree.double_rotate(p, last));\n              } else if (RBTree.is_red(sibling.get_child(!last))) {\n                gp.set_child(dir2, RBTree.single_rotate(p, last));\n              }\n              var gpc = gp.get_child(dir2);\n              gpc.red = true;\n              node.red = true;\n              gpc.left.red = false;\n              gpc.right.red = false;\n            }\n          }\n        }\n      }\n    }\n    if (found !== null) {\n      found.data = node.data;\n      p.set_child(p.right === node, node.get_child(node.left === null));\n      this.size--;\n    }\n    this._root = head.right;\n    if (this._root !== null) {\n      this._root.red = false;\n    }\n    return found !== null;\n  };\n  ;\n  RBTree.is_red = function (node) {\n    return node !== null && node.red;\n  };\n  RBTree.single_rotate = function (root, dir) {\n    var save = root.get_child(!dir);\n    root.set_child(!dir, save.get_child(dir));\n    save.set_child(dir, root);\n    root.red = true;\n    save.red = false;\n    return save;\n  };\n  RBTree.double_rotate = function (root, dir) {\n    root.set_child(!dir, RBTree.single_rotate(root.get_child(!dir), !dir));\n    return RBTree.single_rotate(root, dir);\n  };\n  return RBTree;\n}(TreeBase);\nexports.RBTree = RBTree;","map":{"version":3,"names":["TreeBase","findIter","data","res","_root","iter","iterator","c","_comparator","_cursor","_ancestors","push","get_child","prototype","clear","size","find","lowerBound","_bound","upperBound","cmp","reverse_cmp","a","b","min","left","max","right","Iterator","each","cb","it","next","reach","prev","cur","i","length","exports","tree","_tree","root","_minNode","save","pop","_maxNode","start","Node","red","dir","set_child","val","RBTree","_super","__extends","comparator","_this","call","insert","ret","head","undefined","last","gp","ggp","p","node","is_red","dir2","single_rotate","double_rotate","remove","found","sr","sibling","gpc"],"sources":["/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/node_modules/webcola/WebCola/src/rbtree.ts"],"sourcesContent":["    //Based on js_es:\r\n    //\r\n    //https://github.com/vadimg/js_bintrees\r\n    //\r\n    //Copyright (C) 2011 by Vadim Graboys\r\n    //\r\n    //Permission is hereby granted, free of charge, to any person obtaining a copy\r\n    //of this software and associated documentation files (the \"Software\"), to deal\r\n    //in the Software without restriction, including without limitation the rights\r\n    //to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    //copies of the Software, and to permit persons to whom the Software is\r\n    //furnished to do so, subject to the following conditions:\r\n    //\r\n    //The above copyright notice and this permission notice shall be included in\r\n    //all copies or substantial portions of the Software.\r\n    //\r\n    //THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n    //IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    //FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n    //AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n    //LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n    //OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n    //THE SOFTWARE.\r\n    export class TreeBase {\r\n        _root;\r\n        size;\r\n        _comparator;\r\n        // removes all nodes from the tree\r\n        clear() {\r\n            this._root = null;\r\n            this.size = 0;\r\n        };\r\n\r\n        // returns node data if found, null otherwise\r\n        find(data) {\r\n            var res = this._root;\r\n\r\n            while (res !== null) {\r\n                var c = this._comparator(data, res.data);\r\n                if (c === 0) {\r\n                    return res.data;\r\n                }\r\n                else {\r\n                    res = res.get_child(c > 0);\r\n                }\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        // returns iterator to node if found, null otherwise\r\n        findIter = function (data) {\r\n            var res = this._root;\r\n            var iter = this.iterator();\r\n\r\n            while (res !== null) {\r\n                var c = this._comparator(data, res.data);\r\n                if (c === 0) {\r\n                    iter._cursor = res;\r\n                    return iter;\r\n                }\r\n                else {\r\n                    iter._ancestors.push(res);\r\n                    res = res.get_child(c > 0);\r\n                }\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        // Returns an interator to the tree node immediately before (or at) the element\r\n        lowerBound(data) {\r\n            return this._bound(data, this._comparator);\r\n        };\r\n\r\n        // Returns an interator to the tree node immediately after (or at) the element\r\n        upperBound(data) {\r\n            var cmp = this._comparator;\r\n\r\n            function reverse_cmp(a, b) {\r\n                return cmp(b, a);\r\n            }\r\n\r\n            return this._bound(data, reverse_cmp);\r\n        };\r\n\r\n        // returns null if tree is empty\r\n        min() {\r\n            var res = this._root;\r\n            if (res === null) {\r\n                return null;\r\n            }\r\n\r\n            while (res.left !== null) {\r\n                res = res.left;\r\n            }\r\n\r\n            return res.data;\r\n        };\r\n\r\n        // returns null if tree is empty\r\n        max() {\r\n            var res = this._root;\r\n            if (res === null) {\r\n                return null;\r\n            }\r\n\r\n            while (res.right !== null) {\r\n                res = res.right;\r\n            }\r\n\r\n            return res.data;\r\n        };\r\n\r\n        // returns a null iterator\r\n        // call next() or prev() to point to an element\r\n        iterator(): Iterator {\r\n            return new Iterator(this);\r\n        };\r\n\r\n        // calls cb on each node's data, in order\r\n        each(cb) {\r\n            var it = this.iterator(), data;\r\n            while ((data = it.next()) !== null) {\r\n                cb(data);\r\n            }\r\n        };\r\n\r\n        // calls cb on each node's data, in reverse order\r\n        reach(cb) {\r\n            var it = this.iterator(), data;\r\n            while ((data = it.prev()) !== null) {\r\n                cb(data);\r\n            }\r\n        };\r\n\r\n        // used for lowerBound and upperBound\r\n        _bound(data, cmp) {\r\n            var cur = this._root;\r\n            var iter = this.iterator();\r\n\r\n            while (cur !== null) {\r\n                var c = this._comparator(data, cur.data);\r\n                if (c === 0) {\r\n                    iter._cursor = cur;\r\n                    return iter;\r\n                }\r\n                iter._ancestors.push(cur);\r\n                cur = cur.get_child(c > 0);\r\n            }\r\n\r\n            for (var i = iter._ancestors.length - 1; i >= 0; --i) {\r\n                cur = iter._ancestors[i];\r\n                if (cmp(data, cur.data) > 0) {\r\n                    iter._cursor = cur;\r\n                    iter._ancestors.length = i;\r\n                    return iter;\r\n                }\r\n            }\r\n\r\n            iter._ancestors.length = 0;\r\n            return iter;\r\n        };\r\n    }\r\n    export class Iterator {\r\n        _tree;\r\n        _ancestors;\r\n        _cursor;\r\n        constructor(tree) {\r\n            this._tree = tree;\r\n            this._ancestors = [];\r\n            this._cursor = null;\r\n        }\r\n\r\n        data() {\r\n            return this._cursor !== null ? this._cursor.data : null;\r\n        };\r\n\r\n        // if null-iterator, returns first node\r\n        // otherwise, returns next node\r\n        next() {\r\n            if (this._cursor === null) {\r\n                var root = this._tree._root;\r\n                if (root !== null) {\r\n                    this._minNode(root);\r\n                }\r\n            }\r\n            else {\r\n                if (this._cursor.right === null) {\r\n                    // no greater node in subtree, go up to parent\r\n                    // if coming from a right child, continue up the stack\r\n                    var save;\r\n                    do {\r\n                        save = this._cursor;\r\n                        if (this._ancestors.length) {\r\n                            this._cursor = this._ancestors.pop();\r\n                        }\r\n                        else {\r\n                            this._cursor = null;\r\n                            break;\r\n                        }\r\n                    } while (this._cursor.right === save);\r\n                }\r\n                else {\r\n                    // get the next node from the subtree\r\n                    this._ancestors.push(this._cursor);\r\n                    this._minNode(this._cursor.right);\r\n                }\r\n            }\r\n            return this._cursor !== null ? this._cursor.data : null;\r\n        };\r\n\r\n        // if null-iterator, returns last node\r\n        // otherwise, returns previous node\r\n        prev() {\r\n            if (this._cursor === null) {\r\n                var root = this._tree._root;\r\n                if (root !== null) {\r\n                    this._maxNode(root);\r\n                }\r\n            }\r\n            else {\r\n                if (this._cursor.left === null) {\r\n                    var save;\r\n                    do {\r\n                        save = this._cursor;\r\n                        if (this._ancestors.length) {\r\n                            this._cursor = this._ancestors.pop();\r\n                        }\r\n                        else {\r\n                            this._cursor = null;\r\n                            break;\r\n                        }\r\n                    } while (this._cursor.left === save);\r\n                }\r\n                else {\r\n                    this._ancestors.push(this._cursor);\r\n                    this._maxNode(this._cursor.left);\r\n                }\r\n            }\r\n            return this._cursor !== null ? this._cursor.data : null;\r\n        };\r\n\r\n        _minNode(start) {\r\n            while (start.left !== null) {\r\n                this._ancestors.push(start);\r\n                start = start.left;\r\n            }\r\n            this._cursor = start;\r\n        };\r\n\r\n        _maxNode(start) {\r\n            while (start.right !== null) {\r\n                this._ancestors.push(start);\r\n                start = start.right;\r\n            }\r\n            this._cursor = start;\r\n        };\r\n    }\r\n\r\n    class Node {\r\n        data;\r\n        left;\r\n        right;\r\n        red;\r\n        constructor(data) {\r\n            this.data = data;\r\n            this.left = null;\r\n            this.right = null;\r\n            this.red = true;\r\n        }\r\n\r\n        get_child(dir) {\r\n            return dir ? this.right : this.left;\r\n        };\r\n\r\n        set_child(dir, val) {\r\n            if (dir) {\r\n                this.right = val;\r\n            }\r\n            else {\r\n                this.left = val;\r\n            }\r\n        };\r\n    }\r\n\r\n    export class RBTree<T> extends TreeBase {\r\n\r\n        _root;\r\n        _comparator;\r\n        size;\r\n        constructor(comparator: (a: T, b: T) => number) {\r\n            super();\r\n            this._root = null;\r\n            this._comparator = comparator;\r\n            this.size = 0;\r\n        }\r\n\r\n        // returns true if inserted, false if duplicate\r\n        insert(data) {\r\n            var ret = false;\r\n\r\n            if (this._root === null) {\r\n                // empty tree\r\n                this._root = new Node(data);\r\n                ret = true;\r\n                this.size++;\r\n            }\r\n            else {\r\n                var head = new Node(undefined); // fake tree root\r\n\r\n                var dir = false;\r\n                var last = false;\r\n\r\n                // setup\r\n                var gp = null; // grandparent\r\n                var ggp = head; // grand-grand-parent\r\n                var p = null; // parent\r\n                var node = this._root;\r\n                ggp.right = this._root;\r\n\r\n                // search down\r\n                while (true) {\r\n                    if (node === null) {\r\n                        // insert new node at the bottom\r\n                        node = new Node(data);\r\n                        p.set_child(dir, node);\r\n                        ret = true;\r\n                        this.size++;\r\n                    }\r\n                    else if (RBTree.is_red(node.left) && RBTree.is_red(node.right)) {\r\n                        // color flip\r\n                        node.red = true;\r\n                        node.left.red = false;\r\n                        node.right.red = false;\r\n                    }\r\n\r\n                    // fix red violation\r\n                    if (RBTree.is_red(node) && RBTree.is_red(p)) {\r\n                        var dir2 = ggp.right === gp;\r\n\r\n                        if (node === p.get_child(last)) {\r\n                            ggp.set_child(dir2, RBTree.single_rotate(gp, !last));\r\n                        }\r\n                        else {\r\n                            ggp.set_child(dir2, RBTree.double_rotate(gp, !last));\r\n                        }\r\n                    }\r\n\r\n                    var cmp = this._comparator(node.data, data);\r\n\r\n                    // stop if found\r\n                    if (cmp === 0) {\r\n                        break;\r\n                    }\r\n\r\n                    last = dir;\r\n                    dir = cmp < 0;\r\n\r\n                    // update helpers\r\n                    if (gp !== null) {\r\n                        ggp = gp;\r\n                    }\r\n                    gp = p;\r\n                    p = node;\r\n                    node = node.get_child(dir);\r\n                }\r\n\r\n                // update root\r\n                this._root = head.right;\r\n            }\r\n\r\n            // make root black\r\n            this._root.red = false;\r\n\r\n            return ret;\r\n        };\r\n\r\n        // returns true if removed, false if not found\r\n        remove(data) {\r\n            if (this._root === null) {\r\n                return false;\r\n            }\r\n\r\n            var head = new Node(undefined); // fake tree root\r\n            var node = head;\r\n            node.right = this._root;\r\n            var p = null; // parent\r\n            var gp = null; // grand parent\r\n            var found = null; // found item\r\n            var dir = true;\r\n\r\n            while (node.get_child(dir) !== null) {\r\n                var last = dir;\r\n\r\n                // update helpers\r\n                gp = p;\r\n                p = node;\r\n                node = node.get_child(dir);\r\n\r\n                var cmp = this._comparator(data, node.data);\r\n\r\n                dir = cmp > 0;\r\n\r\n                // save found node\r\n                if (cmp === 0) {\r\n                    found = node;\r\n                }\r\n\r\n                // push the red node down\r\n                if (!RBTree.is_red(node) && !RBTree.is_red(node.get_child(dir))) {\r\n                    if (RBTree.is_red(node.get_child(!dir))) {\r\n                        var sr = RBTree.single_rotate(node, dir);\r\n                        p.set_child(last, sr);\r\n                        p = sr;\r\n                    }\r\n                    else if (!RBTree.is_red(node.get_child(!dir))) {\r\n                        var sibling = p.get_child(!last);\r\n                        if (sibling !== null) {\r\n                            if (!RBTree.is_red(sibling.get_child(!last)) && !RBTree.is_red(sibling.get_child(last))) {\r\n                                // color flip\r\n                                p.red = false;\r\n                                sibling.red = true;\r\n                                node.red = true;\r\n                            }\r\n                            else {\r\n                                var dir2 = gp.right === p;\r\n\r\n                                if (RBTree.is_red(sibling.get_child(last))) {\r\n                                    gp.set_child(dir2, RBTree.double_rotate(p, last));\r\n                                }\r\n                                else if (RBTree.is_red(sibling.get_child(!last))) {\r\n                                    gp.set_child(dir2, RBTree.single_rotate(p, last));\r\n                                }\r\n\r\n                                // ensure correct coloring\r\n                                var gpc = gp.get_child(dir2);\r\n                                gpc.red = true;\r\n                                node.red = true;\r\n                                gpc.left.red = false;\r\n                                gpc.right.red = false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // replace and remove if found\r\n            if (found !== null) {\r\n                found.data = node.data;\r\n                p.set_child(p.right === node, node.get_child(node.left === null));\r\n                this.size--;\r\n            }\r\n\r\n            // update root and make it black\r\n            this._root = head.right;\r\n            if (this._root !== null) {\r\n                this._root.red = false;\r\n            }\r\n\r\n            return found !== null;\r\n        };\r\n\r\n        static is_red(node) {\r\n            return node !== null && node.red;\r\n        }\r\n\r\n        static single_rotate(root, dir) {\r\n            var save = root.get_child(!dir);\r\n\r\n            root.set_child(!dir, save.get_child(dir));\r\n            save.set_child(dir, root);\r\n\r\n            root.red = true;\r\n            save.red = false;\r\n\r\n            return save;\r\n        }\r\n\r\n        static double_rotate(root, dir) {\r\n            root.set_child(!dir, RBTree.single_rotate(root.get_child(!dir), !dir));\r\n            return RBTree.single_rotate(root, dir);\r\n        }\r\n    }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}