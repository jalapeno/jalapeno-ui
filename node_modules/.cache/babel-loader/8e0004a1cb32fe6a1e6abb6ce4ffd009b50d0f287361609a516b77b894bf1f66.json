{"ast":null,"code":"var _jsxFileName = \"/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/src/components/NetworkGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport { fetchCollectionData } from '../services/api';\n\n// Define colors as constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = {\n  node: '#CC4A04',\n  // Cayenne orange\n  text: '#000',\n  // Black\n  edge: '#1a365d' // Blue\n};\n\n// Register the cola layout\ncytoscape.use(cola);\nconst NetworkGraph = ({\n  collection\n}) => {\n  _s();\n  const cyRef = useRef(null);\n  const [graphData, setGraphData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadGraphData = async () => {\n      if (!collection) return;\n      setIsLoading(true);\n      setError(null);\n      try {\n        const data = await fetchCollectionData(collection);\n\n        // Transform the data into Cytoscape format\n        const elements = transformDataToCytoscape(data);\n        setGraphData(elements);\n      } catch (err) {\n        setError('Failed to load graph data');\n        console.error('Error loading graph:', err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadGraphData();\n  }, [collection]);\n  const transformDataToCytoscape = data => {\n    const elements = {\n      nodes: [],\n      edges: []\n    };\n\n    // Process the data into nodes and edges\n    if (data && Array.isArray(data)) {\n      data.forEach(item => {\n        if (item._from && item._to) {\n          // This is an edge\n          elements.edges.push({\n            data: {\n              id: item._key,\n              source: item._from,\n              target: item._to,\n              // Add any additional edge properties you want to display\n              ...item\n            }\n          });\n\n          // Add nodes if they don't exist\n          if (!elements.nodes.find(n => n.data.id === item._from)) {\n            elements.nodes.push({\n              data: {\n                id: item._from,\n                label: item._from.split('/').pop() // Get the last part of the ID\n              }\n            });\n          }\n          if (!elements.nodes.find(n => n.data.id === item._to)) {\n            elements.nodes.push({\n              data: {\n                id: item._to,\n                label: item._to.split('/').pop() // Get the last part of the ID\n              }\n            });\n          }\n        }\n      });\n    }\n    return [...elements.nodes, ...elements.edges];\n  };\n  const layout = {\n    name: 'cola',\n    animate: true,\n    refresh: 1,\n    maxSimulationTime: 3000,\n    nodeSpacing: 50,\n    edgeLength: 200\n  };\n  const stylesheet = [{\n    selector: 'node',\n    style: {\n      'background-color': COLORS.node,\n      'label': 'data(label)',\n      'width': 30,\n      'height': 30,\n      'color': COLORS.text,\n      'text-outline-width': 2,\n      'text-outline-color': '#fff',\n      'font-family': 'Consolas',\n      'font-size': '12px'\n    }\n  }, {\n    selector: 'edge',\n    style: {\n      'width': 2,\n      'line-color': COLORS.edge,\n      'curve-style': 'bezier',\n      'target-arrow-color': COLORS.edge,\n      'target-arrow-shape': 'triangle'\n    }\n  }];\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        fontFamily: 'Consolas'\n      },\n      children: \"Loading graph data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        color: 'red',\n        fontFamily: 'Consolas'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 12\n    }, this);\n  }\n  if (!graphData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        fontFamily: 'Consolas'\n      },\n      children: \"Select a graph to visualize\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '600px',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(CytoscapeComponent, {\n      elements: graphData,\n      layout: layout,\n      stylesheet: stylesheet,\n      cy: cy => {\n        cyRef.current = cy;\n      },\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s(NetworkGraph, \"x5ENMG7a7C70cklGyyDzo6upmzk=\");\n_c = NetworkGraph;\nexport default NetworkGraph;\nvar _c;\n$RefreshReg$(_c, \"NetworkGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","CytoscapeComponent","cytoscape","cola","fetchCollectionData","jsxDEV","_jsxDEV","COLORS","node","text","edge","use","NetworkGraph","collection","_s","cyRef","graphData","setGraphData","isLoading","setIsLoading","error","setError","loadGraphData","data","elements","transformDataToCytoscape","err","console","nodes","edges","Array","isArray","forEach","item","_from","_to","push","id","_key","source","target","find","n","label","split","pop","layout","name","animate","refresh","maxSimulationTime","nodeSpacing","edgeLength","stylesheet","selector","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","color","height","width","cy","current","_c","$RefreshReg$"],"sources":["/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/src/components/NetworkGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport { fetchCollectionData } from '../services/api';\n\n// Define colors as constants\nconst COLORS = {\n  node: '#CC4A04',    // Cayenne orange\n  text: '#000',       // Black\n  edge: '#1a365d'     // Blue\n};\n\n// Register the cola layout\ncytoscape.use(cola);\n\nconst NetworkGraph = ({ collection }) => {\n  const cyRef = useRef(null);\n  const [graphData, setGraphData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadGraphData = async () => {\n      if (!collection) return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const data = await fetchCollectionData(collection);\n        \n        // Transform the data into Cytoscape format\n        const elements = transformDataToCytoscape(data);\n        setGraphData(elements);\n      } catch (err) {\n        setError('Failed to load graph data');\n        console.error('Error loading graph:', err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadGraphData();\n  }, [collection]);\n\n  const transformDataToCytoscape = (data) => {\n    const elements = {\n      nodes: [],\n      edges: []\n    };\n\n    // Process the data into nodes and edges\n    if (data && Array.isArray(data)) {\n      data.forEach(item => {\n        if (item._from && item._to) {\n          // This is an edge\n          elements.edges.push({\n            data: {\n              id: item._key,\n              source: item._from,\n              target: item._to,\n              // Add any additional edge properties you want to display\n              ...item\n            }\n          });\n\n          // Add nodes if they don't exist\n          if (!elements.nodes.find(n => n.data.id === item._from)) {\n            elements.nodes.push({\n              data: {\n                id: item._from,\n                label: item._from.split('/').pop() // Get the last part of the ID\n              }\n            });\n          }\n          if (!elements.nodes.find(n => n.data.id === item._to)) {\n            elements.nodes.push({\n              data: {\n                id: item._to,\n                label: item._to.split('/').pop() // Get the last part of the ID\n              }\n            });\n          }\n        }\n      });\n    }\n\n    return [...elements.nodes, ...elements.edges];\n  };\n\n  const layout = {\n    name: 'cola',\n    animate: true,\n    refresh: 1,\n    maxSimulationTime: 3000,\n    nodeSpacing: 50,\n    edgeLength: 200\n  };\n\n  const stylesheet = [\n    {\n      selector: 'node',\n      style: {\n        'background-color': COLORS.node,\n        'label': 'data(label)',\n        'width': 30,\n        'height': 30,\n        'color': COLORS.text,\n        'text-outline-width': 2,\n        'text-outline-color': '#fff',\n        'font-family': 'Consolas',\n        'font-size': '12px'\n      }\n    },\n    {\n      selector: 'edge',\n      style: {\n        'width': 2,\n        'line-color': COLORS.edge,\n        'curve-style': 'bezier',\n        'target-arrow-color': COLORS.edge,\n        'target-arrow-shape': 'triangle'\n      }\n    }\n  ];\n\n  if (isLoading) {\n    return <div style={{ padding: '20px', fontFamily: 'Consolas' }}>Loading graph data...</div>;\n  }\n\n  if (error) {\n    return <div style={{ padding: '20px', color: 'red', fontFamily: 'Consolas' }}>{error}</div>;\n  }\n\n  if (!graphData) {\n    return <div style={{ padding: '20px', fontFamily: 'Consolas' }}>Select a graph to visualize</div>;\n  }\n\n  return (\n    <div style={{ height: '600px', width: '100%' }}>\n      <CytoscapeComponent\n        elements={graphData}\n        layout={layout}\n        stylesheet={stylesheet}\n        cy={(cy) => { cyRef.current = cy; }}\n        style={{ width: '100%', height: '100%' }}\n      />\n    </div>\n  );\n};\n\nexport default NetworkGraph; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}