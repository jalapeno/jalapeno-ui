{"ast":null,"code":"var _jsxFileName = \"/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/src/components/NetworkGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport { apiUrl } from '../config';\n\n// Define colors as constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = {\n  node: '#CC4A04',\n  // Cayenne orange\n  text: '#000',\n  // Black\n  edge: '#1a365d' // Blue\n};\n\n// Register the cola layout\ncytoscape.use(cola);\nconst NetworkGraph = ({\n  collection\n}) => {\n  _s();\n  const cyRef = useRef(null);\n  const [graphData, setGraphData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadGraphData = async () => {\n      if (!collection) return;\n      setIsLoading(true);\n      setError(null);\n      try {\n        console.log('Fetching from:', `${apiUrl}/api/v1/collections/${collection}/edges`);\n        const response = await fetch(`${apiUrl}/api/v1/collections/${collection}/edges`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Received data:', data);\n        const elements = transformDataToCytoscape(data);\n        setGraphData(elements);\n      } catch (err) {\n        console.error('Detailed error:', err);\n        setError(`Failed to load graph data: ${err.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadGraphData();\n  }, [collection]);\n  const transformDataToCytoscape = data => {\n    const elements = {\n      nodes: new Set(),\n      edges: []\n    };\n\n    // Process the data into nodes and edges\n    if (data && Array.isArray(data)) {\n      data.forEach(item => {\n        if (item._from && item._to) {\n          // Add nodes\n          elements.nodes.add({\n            data: {\n              id: item._from,\n              label: item._from.split('/')[1],\n              // Get the part after the collection name\n              type: item._from.split('/')[0] // Get the collection name\n            }\n          });\n          elements.nodes.add({\n            data: {\n              id: item._to,\n              label: item._to.split('/')[1],\n              type: item._to.split('/')[0]\n            }\n          });\n\n          // Add edge\n          elements.edges.push({\n            data: {\n              id: `${item._from}-${item._to}`,\n              source: item._from,\n              target: item._to\n            }\n          });\n        }\n      });\n    }\n    return [...Array.from(elements.nodes), ...elements.edges];\n  };\n  const layout = {\n    name: 'cola',\n    animate: true,\n    refresh: 1,\n    maxSimulationTime: 3000,\n    nodeSpacing: 100,\n    edgeLength: 200,\n    randomize: true,\n    infinite: true\n  };\n  const stylesheet = [{\n    selector: 'node',\n    style: {\n      'background-color': COLORS.node,\n      'label': 'data(label)',\n      'width': 30,\n      'height': 30,\n      'color': COLORS.text,\n      'text-outline-width': 2,\n      'text-outline-color': '#fff',\n      'font-family': 'Consolas',\n      'font-size': '10px',\n      'text-wrap': 'wrap',\n      'text-max-width': '100px'\n    }\n  }, {\n    selector: 'edge',\n    style: {\n      'width': 1.5,\n      'line-color': COLORS.edge,\n      'curve-style': 'bezier',\n      'target-arrow-color': COLORS.edge,\n      'target-arrow-shape': 'triangle',\n      'arrow-scale': 0.8\n    }\n  }];\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        fontFamily: 'Consolas'\n      },\n      children: \"Loading graph data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        color: 'red',\n        fontFamily: 'Consolas'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 12\n    }, this);\n  }\n  if (!graphData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        fontFamily: 'Consolas'\n      },\n      children: \"Select a graph to visualize\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 'calc(100vh - 120px)',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(CytoscapeComponent, {\n      elements: graphData,\n      layout: layout,\n      stylesheet: stylesheet,\n      cy: cy => {\n        cyRef.current = cy;\n      },\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(NetworkGraph, \"x5ENMG7a7C70cklGyyDzo6upmzk=\");\n_c = NetworkGraph;\nexport default NetworkGraph;\nvar _c;\n$RefreshReg$(_c, \"NetworkGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","CytoscapeComponent","cytoscape","cola","apiUrl","jsxDEV","_jsxDEV","COLORS","node","text","edge","use","NetworkGraph","collection","_s","cyRef","graphData","setGraphData","isLoading","setIsLoading","error","setError","loadGraphData","console","log","response","fetch","ok","Error","status","data","json","elements","transformDataToCytoscape","err","message","nodes","Set","edges","Array","isArray","forEach","item","_from","_to","add","id","label","split","type","push","source","target","from","layout","name","animate","refresh","maxSimulationTime","nodeSpacing","edgeLength","randomize","infinite","stylesheet","selector","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","color","height","width","cy","current","_c","$RefreshReg$"],"sources":["/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/src/components/NetworkGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport { apiUrl } from '../config';\n\n// Define colors as constants\nconst COLORS = {\n  node: '#CC4A04',    // Cayenne orange\n  text: '#000',       // Black\n  edge: '#1a365d'     // Blue\n};\n\n// Register the cola layout\ncytoscape.use(cola);\n\nconst NetworkGraph = ({ collection }) => {\n  const cyRef = useRef(null);\n  const [graphData, setGraphData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadGraphData = async () => {\n      if (!collection) return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        console.log('Fetching from:', `${apiUrl}/api/v1/collections/${collection}/edges`);\n        const response = await fetch(`${apiUrl}/api/v1/collections/${collection}/edges`);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Received data:', data);\n        \n        const elements = transformDataToCytoscape(data);\n        setGraphData(elements);\n      } catch (err) {\n        console.error('Detailed error:', err);\n        setError(`Failed to load graph data: ${err.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadGraphData();\n  }, [collection]);\n\n  const transformDataToCytoscape = (data) => {\n    const elements = {\n      nodes: new Set(),\n      edges: []\n    };\n\n    // Process the data into nodes and edges\n    if (data && Array.isArray(data)) {\n      data.forEach(item => {\n        if (item._from && item._to) {\n          // Add nodes\n          elements.nodes.add({\n            data: {\n              id: item._from,\n              label: item._from.split('/')[1], // Get the part after the collection name\n              type: item._from.split('/')[0]   // Get the collection name\n            }\n          });\n\n          elements.nodes.add({\n            data: {\n              id: item._to,\n              label: item._to.split('/')[1],\n              type: item._to.split('/')[0]\n            }\n          });\n\n          // Add edge\n          elements.edges.push({\n            data: {\n              id: `${item._from}-${item._to}`,\n              source: item._from,\n              target: item._to\n            }\n          });\n        }\n      });\n    }\n\n    return [...Array.from(elements.nodes), ...elements.edges];\n  };\n\n  const layout = {\n    name: 'cola',\n    animate: true,\n    refresh: 1,\n    maxSimulationTime: 3000,\n    nodeSpacing: 100,\n    edgeLength: 200,\n    randomize: true,\n    infinite: true\n  };\n\n  const stylesheet = [\n    {\n      selector: 'node',\n      style: {\n        'background-color': COLORS.node,\n        'label': 'data(label)',\n        'width': 30,\n        'height': 30,\n        'color': COLORS.text,\n        'text-outline-width': 2,\n        'text-outline-color': '#fff',\n        'font-family': 'Consolas',\n        'font-size': '10px',\n        'text-wrap': 'wrap',\n        'text-max-width': '100px'\n      }\n    },\n    {\n      selector: 'edge',\n      style: {\n        'width': 1.5,\n        'line-color': COLORS.edge,\n        'curve-style': 'bezier',\n        'target-arrow-color': COLORS.edge,\n        'target-arrow-shape': 'triangle',\n        'arrow-scale': 0.8\n      }\n    }\n  ];\n\n  if (isLoading) {\n    return <div style={{ padding: '20px', fontFamily: 'Consolas' }}>Loading graph data...</div>;\n  }\n\n  if (error) {\n    return <div style={{ padding: '20px', color: 'red', fontFamily: 'Consolas' }}>{error}</div>;\n  }\n\n  if (!graphData) {\n    return <div style={{ padding: '20px', fontFamily: 'Consolas' }}>Select a graph to visualize</div>;\n  }\n\n  return (\n    <div style={{ height: 'calc(100vh - 120px)', width: '100%' }}>\n      <CytoscapeComponent\n        elements={graphData}\n        layout={layout}\n        stylesheet={stylesheet}\n        cy={(cy) => { cyRef.current = cy; }}\n        style={{ width: '100%', height: '100%' }}\n      />\n    </div>\n  );\n};\n\nexport default NetworkGraph; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}