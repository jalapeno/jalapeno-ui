{"ast":null,"code":"var _jsxFileName = \"/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/src/components/NetworkGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport { apiUrl } from '../config';\nimport '../styles/NetworkGraph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = {\n  node: '#CC4A04',\n  // Default node color (Cayenne orange)\n  prefix: '#002921',\n  // Color for prefixes\n  host: '#1E88E5',\n  // Blue for future host nodes\n  service: '#7CB342',\n  // Green for future service nodes\n  gpu: '#6D4C41',\n  // Brown for future GPU nodes\n  text: '#000',\n  // Black\n  edge: '#1a365d' // Blue\n};\ncytoscape.use(cola);\nconst Legend = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"graph-legend\",\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"Legend\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"legend-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"legend-color\",\n      style: {\n        backgroundColor: COLORS.node\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Nodes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"legend-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"legend-color\",\n      style: {\n        backgroundColor: COLORS.prefix\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Prefixes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 21,\n  columnNumber: 3\n}, this);\n_c = Legend;\nconst NetworkGraph = ({\n  collection\n}) => {\n  _s();\n  const cyRef = useRef(null);\n  const [graphData, setGraphData] = useState(null);\n  const [verticesData, setVerticesData] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadGraphData = async () => {\n      if (!collection) return;\n      setIsLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(`${apiUrl}/api/v1/collections/${collection}/topology`);\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        const data = await response.json();\n        console.log('Topology data:', data); // Debug log\n        const elements = transformDataToCytoscape(data);\n        setGraphData(elements);\n      } catch (err) {\n        console.error('Detailed error:', err);\n        setError(`Failed to load graph data: ${err.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadGraphData();\n  }, [collection]);\n  const transformDataToCytoscape = data => {\n    console.log('Raw data:', {\n      edgeCount: data.edges.length,\n      vertexCount: Object.keys(data.vertices).length,\n      vertices: data.vertices,\n      edges: data.edges\n    });\n    const elements = {\n      nodes: new Set(),\n      edges: new Set()\n    };\n    if (!(data !== null && data !== void 0 && data.edges) || !(data !== null && data !== void 0 && data.vertices)) {\n      console.warn('Missing edges or vertices in data');\n      return [];\n    }\n\n    // First, add all vertices as nodes\n    Object.entries(data.vertices).forEach(([id, vertex]) => {\n      elements.nodes.add({\n        group: 'nodes',\n        data: {\n          id: id,\n          label: vertex.name || id.split('/')[1],\n          type: id.split('/')[0],\n          vertexData: vertex\n        }\n      });\n    });\n\n    // Then process edges (deduplicating as we go)\n    const processedEdgePairs = new Set();\n    data.edges.forEach(edge => {\n      if (edge._from && edge._to) {\n        // Create a consistent edge identifier by sorting vertex IDs\n        const vertices = [edge._from, edge._to].sort();\n        const edgeKey = vertices.join('_');\n        if (!processedEdgePairs.has(edgeKey)) {\n          processedEdgePairs.add(edgeKey);\n          elements.edges.add({\n            group: 'edges',\n            data: {\n              id: edgeKey,\n              source: vertices[0],\n              target: vertices[1]\n            }\n          });\n        }\n      }\n    });\n    const finalElements = [...Array.from(elements.nodes), ...Array.from(elements.edges)];\n    console.log('Transformed data:', {\n      totalElements: finalElements.length,\n      nodes: Array.from(elements.nodes).length,\n      edges: Array.from(elements.edges).length,\n      nodeTypes: Array.from(elements.nodes).reduce((acc, node) => {\n        const type = node.data.type;\n        acc[type] = (acc[type] || 0) + 1;\n        return acc;\n      }, {})\n    });\n    return finalElements;\n  };\n  const getTooltipContent = node => {\n    const vertexData = node.data('vertexData') || {};\n    const type = node.data('type');\n    let content = `<div class=\"tooltip-header\">${type}</div><div class=\"tooltip-body\">`;\n\n    // Add common fields if they exist\n    if (vertexData.name) {\n      content += `<div>Name: ${vertexData.name}</div>`;\n    }\n    if (vertexData.asn) {\n      content += `<div>ASN: ${vertexData.asn}</div>`;\n    }\n\n    // Add type-specific fields\n    switch (type) {\n      case 'igp_node':\n        if (vertexData.protocol) {\n          content += `<div>Protocol: ${vertexData.protocol}</div>`;\n        }\n        if (vertexData.sids && vertexData.sids.length > 0) {\n          content += `<div>SIDs: ${vertexData.sids.join(', ')}</div>`;\n        }\n        break;\n      case 'ls_prefix':\n        if (vertexData.prefix) {\n          content += `<div>Prefix: ${vertexData.prefix}</div>`;\n        }\n        break;\n      case 'bgp_node':\n        if (vertexData.peer_ip) {\n          content += `<div>Peer IP: ${vertexData.peer_ip}</div>`;\n        }\n        if (vertexData.address_family) {\n          content += `<div>Address Family: ${vertexData.address_family}</div>`;\n        }\n        break;\n    }\n    content += '</div>';\n    return content;\n  };\n\n  // Setup hover events after the graph is rendered\n  useEffect(() => {\n    if (cyRef.current) {\n      const cy = cyRef.current;\n\n      // Remove any existing event listeners\n      cy.nodes().unbind('mouseover mouseout');\n\n      // Add hover events\n      cy.nodes().bind('mouseover', event => {\n        const node = event.target;\n        const type = node.data('type');\n        const label = node.data('label');\n\n        // Create and position the tooltip div\n        let tooltip = document.getElementById('cy-tooltip');\n        if (!tooltip) {\n          tooltip = document.createElement('div');\n          tooltip.setAttribute('id', 'cy-tooltip');\n          document.body.appendChild(tooltip);\n        }\n        tooltip.innerHTML = `\n          <div class=\"tooltip-header\">${type}</div>\n          <div class=\"tooltip-body\">\n            <div>ID: ${label}</div>\n          </div>\n        `;\n        const renderedPosition = node.renderedPosition();\n        const zoom = cy.zoom();\n        tooltip.style.display = 'block';\n        tooltip.style.left = `${renderedPosition.x}px`;\n        tooltip.style.top = `${renderedPosition.y - 70}px`; // Offset above the node\n      });\n      cy.nodes().bind('mouseout', () => {\n        const tooltip = document.getElementById('cy-tooltip');\n        if (tooltip) {\n          tooltip.style.display = 'none';\n        }\n      });\n    }\n  }, [graphData]);\n  const detectTopology = elements => {\n    if (!elements || elements.length === 0) {\n      return {\n        isClos: false,\n        reason: 'No elements to analyze'\n      };\n    }\n    const nodes = elements.filter(ele => ele.group === 'nodes');\n    const edges = elements.filter(ele => ele.group === 'edges');\n\n    // Build adjacency map for IGP nodes only\n    const igpAdjacency = {};\n    edges.forEach(edge => {\n      const sourceNode = nodes.find(n => n.data.id === edge.data.source);\n      const targetNode = nodes.find(n => n.data.id === edge.data.target);\n\n      // Only consider edges between IGP nodes\n      if ((sourceNode === null || sourceNode === void 0 ? void 0 : sourceNode.data.type) === 'igp_node' && (targetNode === null || targetNode === void 0 ? void 0 : targetNode.data.type) === 'igp_node') {\n        if (!igpAdjacency[edge.data.source]) igpAdjacency[edge.data.source] = new Set();\n        if (!igpAdjacency[edge.data.target]) igpAdjacency[edge.data.target] = new Set();\n        igpAdjacency[edge.data.source].add(edge.data.target);\n        igpAdjacency[edge.data.target].add(edge.data.source);\n      }\n    });\n\n    // Get IGP nodes and their degrees\n    const igpNodes = nodes.filter(node => node.data.type === 'igp_node');\n    console.log('IGP nodes found:', igpNodes.length);\n\n    // Calculate and analyze IGP node degrees\n    const nodeDegrees = {};\n    igpNodes.forEach(node => {\n      var _igpAdjacency$node$da;\n      nodeDegrees[node.data.id] = ((_igpAdjacency$node$da = igpAdjacency[node.data.id]) === null || _igpAdjacency$node$da === void 0 ? void 0 : _igpAdjacency$node$da.size) || 0;\n    });\n    const degrees = Object.values(nodeDegrees);\n    const sortedDegrees = [...degrees].sort((a, b) => b - a);\n    console.log('Degree distribution:', {\n      degrees: sortedDegrees,\n      nodeCount: igpNodes.length,\n      uniqueDegrees: [...new Set(sortedDegrees)]\n    });\n\n    // In a CLOS topology:\n    // - Spine nodes should have high degree (connected to many leaves)\n    // - Leaf nodes should have lower degree (connected to spines only)\n    // - Number of spine nodes should be less than leaf nodes\n\n    // Identify potential spine/leaf split\n    const averageDegree = degrees.reduce((a, b) => a + b, 0) / degrees.length;\n    const potentialSpines = sortedDegrees.filter(d => d > averageDegree);\n    const potentialLeaves = sortedDegrees.filter(d => d <= averageDegree);\n    console.log('CLOS analysis:', {\n      averageDegree,\n      potentialSpineCount: potentialSpines.length,\n      potentialLeafCount: potentialLeaves.length,\n      spineDegreesRange: potentialSpines.length ? `${potentialSpines[potentialSpines.length - 1]}-${potentialSpines[0]}` : 'N/A',\n      leafDegreesRange: potentialLeaves.length ? `${potentialLeaves[potentialLeaves.length - 1]}-${potentialLeaves[0]}` : 'N/A'\n    });\n\n    // CLOS criteria\n    const hasReasonableSpineCount = potentialSpines.length >= 2 && potentialSpines.length <= igpNodes.length * 0.3;\n    const hasDistinctGroups = Math.min(...potentialSpines) > Math.max(...potentialLeaves);\n    const hasExpectedRatio = potentialLeaves.length > potentialSpines.length;\n    const isClos = hasReasonableSpineCount && hasDistinctGroups && hasExpectedRatio;\n    return {\n      isClos,\n      reason: isClos ? 'CLOS pattern detected' : 'Node degree distribution does not match CLOS pattern',\n      analysis: {\n        hasReasonableSpineCount,\n        hasDistinctGroups,\n        hasExpectedRatio,\n        spineCount: potentialSpines.length,\n        leafCount: potentialLeaves.length,\n        spineNodes: igpNodes.filter(n => nodeDegrees[n.data.id] > averageDegree).map(n => n.data.id)\n      }\n    };\n  };\n  const getLayout = elements => {\n    const topology = detectTopology(elements);\n    console.log('Topology detection result:', topology);\n    if (topology.isClos) {\n      console.log('Applying CLOS layout');\n      return {\n        name: 'preset',\n        positions: node => {\n          var _cyRef$current, _cyRef$current2;\n          const width = ((_cyRef$current = cyRef.current) === null || _cyRef$current === void 0 ? void 0 : _cyRef$current.width()) || 1000;\n          const height = ((_cyRef$current2 = cyRef.current) === null || _cyRef$current2 === void 0 ? void 0 : _cyRef$current2.height()) || 800;\n          const type = node.data('type');\n          console.log('Positioning node:', {\n            id: node.data('id'),\n            type: type,\n            width: width,\n            height: height\n          });\n\n          // Group nodes by type for counting\n          const nodesByType = {\n            spine: nodes.filter(n => {\n              var _n$data$vertexData;\n              return n.data.type === 'igp_node' && ((_n$data$vertexData = n.data.vertexData) === null || _n$data$vertexData === void 0 ? void 0 : _n$data$vertexData.role) === 'spine';\n            }),\n            leaf: nodes.filter(n => {\n              var _n$data$vertexData2;\n              return n.data.type === 'igp_node' && ((_n$data$vertexData2 = n.data.vertexData) === null || _n$data$vertexData2 === void 0 ? void 0 : _n$data$vertexData2.role) !== 'spine';\n            }),\n            bgp: nodes.filter(n => n.data.type === 'bgp_node'),\n            prefix: nodes.filter(n => n.data.type === 'ls_prefix')\n          };\n\n          // Calculate position based on node type\n          if (type === 'igp_node') {\n            var _node$data;\n            const isSpine = ((_node$data = node.data('vertexData')) === null || _node$data === void 0 ? void 0 : _node$data.role) === 'spine';\n            const typeNodes = isSpine ? nodesByType.spine : nodesByType.leaf;\n            const index = typeNodes.indexOf(node);\n            const total = typeNodes.length;\n            return {\n              x: width * (index + 1) / (total + 1),\n              y: isSpine ? height * 0.2 : height * 0.5\n            };\n          } else if (type === 'bgp_node') {\n            const index = nodesByType.bgp.indexOf(node);\n            const total = nodesByType.bgp.length;\n            return {\n              x: width * (index + 1) / (total + 1),\n              y: height * 0.35\n            };\n          } else if (type === 'ls_prefix') {\n            const index = nodesByType.prefix.indexOf(node);\n            const total = nodesByType.prefix.length;\n            return {\n              x: width * (index + 1) / (total + 1),\n              y: height * 0.8\n            };\n          }\n          return {\n            x: width / 2,\n            y: height / 2\n          };\n        },\n        fit: true,\n        padding: 50\n      };\n    } else {\n      console.log('Applying force-directed layout');\n      return {\n        name: 'cola',\n        animate: true,\n        refresh: 1,\n        maxSimulationTime: 3000,\n        nodeSpacing: 100,\n        edgeLength: 200,\n        randomize: true,\n        infinite: true\n      };\n    }\n  };\n\n  // Ensure layout is applied after graph data changes\n  useEffect(() => {\n    if (graphData && cyRef.current) {\n      console.log('Applying layout to graph');\n      const layout = getLayout(graphData);\n      if (layout) {\n        cyRef.current.layout(layout).run();\n      }\n    }\n  }, [graphData]);\n  const stylesheet = [{\n    selector: 'node',\n    style: {\n      'background-color': ele => {\n        const nodeType = ele.data('type');\n        switch (nodeType) {\n          case 'igp_node':\n            return COLORS.node;\n          case 'bgp_node':\n            return COLORS.host;\n          case 'ls_prefix':\n            return COLORS.prefix;\n          default:\n            return COLORS.node;\n        }\n      },\n      'label': 'data(label)',\n      'width': 30,\n      'height': 30,\n      'color': COLORS.text,\n      'text-outline-width': 2,\n      'text-outline-color': '#fff',\n      'font-family': 'Consolas',\n      'font-size': '10px',\n      'text-wrap': 'wrap',\n      'text-max-width': '100px'\n    }\n  }, {\n    selector: 'edge',\n    style: {\n      'width': 1.5,\n      'line-color': COLORS.edge,\n      'curve-style': 'bezier',\n      'target-arrow-color': COLORS.edge,\n      'target-arrow-shape': 'triangle',\n      'arrow-scale': 0.8\n    }\n  }];\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        fontFamily: 'Consolas'\n      },\n      children: \"Loading graph data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        color: 'red',\n        fontFamily: 'Consolas'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 12\n    }, this);\n  }\n  if (!graphData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        fontFamily: 'Consolas'\n      },\n      children: \"Select a graph to visualize\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"network-graph-container\",\n    children: [/*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-area\",\n      children: /*#__PURE__*/_jsxDEV(CytoscapeComponent, {\n        elements: graphData,\n        layout: getLayout(graphData),\n        stylesheet: stylesheet,\n        cy: cy => {\n          cyRef.current = cy;\n        },\n        style: {\n          width: '100%',\n          height: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 449,\n    columnNumber: 5\n  }, this);\n};\n_s(NetworkGraph, \"zfD1i51Y64EV2AGtN6zwmxwQ5FA=\");\n_c2 = NetworkGraph;\nexport default NetworkGraph;\nvar _c, _c2;\n$RefreshReg$(_c, \"Legend\");\n$RefreshReg$(_c2, \"NetworkGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","CytoscapeComponent","cytoscape","cola","apiUrl","jsxDEV","_jsxDEV","COLORS","node","prefix","host","service","gpu","text","edge","use","Legend","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","_c","NetworkGraph","collection","_s","cyRef","graphData","setGraphData","verticesData","setVerticesData","isLoading","setIsLoading","error","setError","loadGraphData","response","fetch","ok","Error","status","data","json","console","log","elements","transformDataToCytoscape","err","message","edgeCount","edges","length","vertexCount","Object","keys","vertices","nodes","Set","warn","entries","forEach","id","vertex","add","group","label","name","split","type","vertexData","processedEdgePairs","_from","_to","sort","edgeKey","join","has","source","target","finalElements","Array","from","totalElements","nodeTypes","reduce","acc","getTooltipContent","content","asn","protocol","sids","peer_ip","address_family","current","cy","unbind","bind","event","tooltip","document","getElementById","createElement","setAttribute","body","appendChild","innerHTML","renderedPosition","zoom","display","left","x","top","y","detectTopology","isClos","reason","filter","ele","igpAdjacency","sourceNode","find","n","targetNode","igpNodes","nodeDegrees","_igpAdjacency$node$da","size","degrees","values","sortedDegrees","a","b","nodeCount","uniqueDegrees","averageDegree","potentialSpines","d","potentialLeaves","potentialSpineCount","potentialLeafCount","spineDegreesRange","leafDegreesRange","hasReasonableSpineCount","hasDistinctGroups","Math","min","max","hasExpectedRatio","analysis","spineCount","leafCount","spineNodes","map","getLayout","topology","positions","_cyRef$current","_cyRef$current2","width","height","nodesByType","spine","_n$data$vertexData","role","leaf","_n$data$vertexData2","bgp","_node$data","isSpine","typeNodes","index","indexOf","total","fit","padding","animate","refresh","maxSimulationTime","nodeSpacing","edgeLength","randomize","infinite","layout","run","stylesheet","selector","nodeType","fontFamily","color","_c2","$RefreshReg$"],"sources":["/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/src/components/NetworkGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport { apiUrl } from '../config';\nimport '../styles/NetworkGraph.css';\n\nconst COLORS = {\n  node: '#CC4A04',     // Default node color (Cayenne orange)\n  prefix: '#002921',   // Color for prefixes\n  host: '#1E88E5',     // Blue for future host nodes\n  service: '#7CB342',  // Green for future service nodes\n  gpu: '#6D4C41',      // Brown for future GPU nodes\n  text: '#000',        // Black\n  edge: '#1a365d'      // Blue\n};\n\ncytoscape.use(cola);\n\nconst Legend = () => (\n  <div className=\"graph-legend\">\n    <h3>Legend</h3>\n    <div className=\"legend-item\">\n      <span className=\"legend-color\" style={{ backgroundColor: COLORS.node }}></span>\n      <span>Nodes</span>\n    </div>\n    <div className=\"legend-item\">\n      <span className=\"legend-color\" style={{ backgroundColor: COLORS.prefix }}></span>\n      <span>Prefixes</span>\n    </div>\n  </div>\n);\n\nconst NetworkGraph = ({ collection }) => {\n  const cyRef = useRef(null);\n  const [graphData, setGraphData] = useState(null);\n  const [verticesData, setVerticesData] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadGraphData = async () => {\n      if (!collection) return;\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const response = await fetch(`${apiUrl}/api/v1/collections/${collection}/topology`);\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        const data = await response.json();\n        console.log('Topology data:', data); // Debug log\n        const elements = transformDataToCytoscape(data);\n        setGraphData(elements);\n      } catch (err) {\n        console.error('Detailed error:', err);\n        setError(`Failed to load graph data: ${err.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadGraphData();\n  }, [collection]);\n\n  const transformDataToCytoscape = (data) => {\n    console.log('Raw data:', {\n      edgeCount: data.edges.length,\n      vertexCount: Object.keys(data.vertices).length,\n      vertices: data.vertices,\n      edges: data.edges\n    });\n\n    const elements = {\n      nodes: new Set(),\n      edges: new Set()\n    };\n\n    if (!data?.edges || !data?.vertices) {\n      console.warn('Missing edges or vertices in data');\n      return [];\n    }\n\n    // First, add all vertices as nodes\n    Object.entries(data.vertices).forEach(([id, vertex]) => {\n      elements.nodes.add({\n        group: 'nodes',\n        data: {\n          id: id,\n          label: vertex.name || id.split('/')[1],\n          type: id.split('/')[0],\n          vertexData: vertex\n        }\n      });\n    });\n\n    // Then process edges (deduplicating as we go)\n    const processedEdgePairs = new Set();\n\n    data.edges.forEach(edge => {\n      if (edge._from && edge._to) {\n        // Create a consistent edge identifier by sorting vertex IDs\n        const vertices = [edge._from, edge._to].sort();\n        const edgeKey = vertices.join('_');\n\n        if (!processedEdgePairs.has(edgeKey)) {\n          processedEdgePairs.add(edgeKey);\n          \n          elements.edges.add({\n            group: 'edges',\n            data: {\n              id: edgeKey,\n              source: vertices[0],\n              target: vertices[1]\n            }\n          });\n        }\n      }\n    });\n\n    const finalElements = [...Array.from(elements.nodes), ...Array.from(elements.edges)];\n    \n    console.log('Transformed data:', {\n      totalElements: finalElements.length,\n      nodes: Array.from(elements.nodes).length,\n      edges: Array.from(elements.edges).length,\n      nodeTypes: Array.from(elements.nodes).reduce((acc, node) => {\n        const type = node.data.type;\n        acc[type] = (acc[type] || 0) + 1;\n        return acc;\n      }, {})\n    });\n\n    return finalElements;\n  };\n\n  const getTooltipContent = (node) => {\n    const vertexData = node.data('vertexData') || {};\n    const type = node.data('type');\n    \n    let content = `<div class=\"tooltip-header\">${type}</div><div class=\"tooltip-body\">`;\n    \n    // Add common fields if they exist\n    if (vertexData.name) {\n      content += `<div>Name: ${vertexData.name}</div>`;\n    }\n    if (vertexData.asn) {\n      content += `<div>ASN: ${vertexData.asn}</div>`;\n    }\n\n    // Add type-specific fields\n    switch (type) {\n      case 'igp_node':\n        if (vertexData.protocol) {\n          content += `<div>Protocol: ${vertexData.protocol}</div>`;\n        }\n        if (vertexData.sids && vertexData.sids.length > 0) {\n          content += `<div>SIDs: ${vertexData.sids.join(', ')}</div>`;\n        }\n        break;\n      \n      case 'ls_prefix':\n        if (vertexData.prefix) {\n          content += `<div>Prefix: ${vertexData.prefix}</div>`;\n        }\n        break;\n\n      case 'bgp_node':\n        if (vertexData.peer_ip) {\n          content += `<div>Peer IP: ${vertexData.peer_ip}</div>`;\n        }\n        if (vertexData.address_family) {\n          content += `<div>Address Family: ${vertexData.address_family}</div>`;\n        }\n        break;\n    }\n    \n    content += '</div>';\n    return content;\n  };\n\n  // Setup hover events after the graph is rendered\n  useEffect(() => {\n    if (cyRef.current) {\n      const cy = cyRef.current;\n      \n      // Remove any existing event listeners\n      cy.nodes().unbind('mouseover mouseout');\n      \n      // Add hover events\n      cy.nodes().bind('mouseover', (event) => {\n        const node = event.target;\n        const type = node.data('type');\n        const label = node.data('label');\n        \n        // Create and position the tooltip div\n        let tooltip = document.getElementById('cy-tooltip');\n        if (!tooltip) {\n          tooltip = document.createElement('div');\n          tooltip.setAttribute('id', 'cy-tooltip');\n          document.body.appendChild(tooltip);\n        }\n        \n        tooltip.innerHTML = `\n          <div class=\"tooltip-header\">${type}</div>\n          <div class=\"tooltip-body\">\n            <div>ID: ${label}</div>\n          </div>\n        `;\n        \n        const renderedPosition = node.renderedPosition();\n        const zoom = cy.zoom();\n        \n        tooltip.style.display = 'block';\n        tooltip.style.left = `${renderedPosition.x}px`;\n        tooltip.style.top = `${renderedPosition.y - 70}px`; // Offset above the node\n      });\n      \n      cy.nodes().bind('mouseout', () => {\n        const tooltip = document.getElementById('cy-tooltip');\n        if (tooltip) {\n          tooltip.style.display = 'none';\n        }\n      });\n    }\n  }, [graphData]);\n\n  const detectTopology = (elements) => {\n    if (!elements || elements.length === 0) {\n      return { isClos: false, reason: 'No elements to analyze' };\n    }\n\n    const nodes = elements.filter(ele => ele.group === 'nodes');\n    const edges = elements.filter(ele => ele.group === 'edges');\n\n    // Build adjacency map for IGP nodes only\n    const igpAdjacency = {};\n    edges.forEach(edge => {\n      const sourceNode = nodes.find(n => n.data.id === edge.data.source);\n      const targetNode = nodes.find(n => n.data.id === edge.data.target);\n      \n      // Only consider edges between IGP nodes\n      if (sourceNode?.data.type === 'igp_node' && targetNode?.data.type === 'igp_node') {\n        if (!igpAdjacency[edge.data.source]) igpAdjacency[edge.data.source] = new Set();\n        if (!igpAdjacency[edge.data.target]) igpAdjacency[edge.data.target] = new Set();\n        igpAdjacency[edge.data.source].add(edge.data.target);\n        igpAdjacency[edge.data.target].add(edge.data.source);\n      }\n    });\n\n    // Get IGP nodes and their degrees\n    const igpNodes = nodes.filter(node => node.data.type === 'igp_node');\n    console.log('IGP nodes found:', igpNodes.length);\n\n    // Calculate and analyze IGP node degrees\n    const nodeDegrees = {};\n    igpNodes.forEach(node => {\n      nodeDegrees[node.data.id] = igpAdjacency[node.data.id]?.size || 0;\n    });\n\n    const degrees = Object.values(nodeDegrees);\n    const sortedDegrees = [...degrees].sort((a, b) => b - a);\n    \n    console.log('Degree distribution:', {\n      degrees: sortedDegrees,\n      nodeCount: igpNodes.length,\n      uniqueDegrees: [...new Set(sortedDegrees)]\n    });\n\n    // In a CLOS topology:\n    // - Spine nodes should have high degree (connected to many leaves)\n    // - Leaf nodes should have lower degree (connected to spines only)\n    // - Number of spine nodes should be less than leaf nodes\n    \n    // Identify potential spine/leaf split\n    const averageDegree = degrees.reduce((a, b) => a + b, 0) / degrees.length;\n    const potentialSpines = sortedDegrees.filter(d => d > averageDegree);\n    const potentialLeaves = sortedDegrees.filter(d => d <= averageDegree);\n\n    console.log('CLOS analysis:', {\n      averageDegree,\n      potentialSpineCount: potentialSpines.length,\n      potentialLeafCount: potentialLeaves.length,\n      spineDegreesRange: potentialSpines.length ? `${potentialSpines[potentialSpines.length-1]}-${potentialSpines[0]}` : 'N/A',\n      leafDegreesRange: potentialLeaves.length ? `${potentialLeaves[potentialLeaves.length-1]}-${potentialLeaves[0]}` : 'N/A'\n    });\n\n    // CLOS criteria\n    const hasReasonableSpineCount = potentialSpines.length >= 2 && potentialSpines.length <= igpNodes.length * 0.3;\n    const hasDistinctGroups = Math.min(...potentialSpines) > Math.max(...potentialLeaves);\n    const hasExpectedRatio = potentialLeaves.length > potentialSpines.length;\n\n    const isClos = hasReasonableSpineCount && hasDistinctGroups && hasExpectedRatio;\n\n    return {\n      isClos,\n      reason: isClos ? 'CLOS pattern detected' : 'Node degree distribution does not match CLOS pattern',\n      analysis: {\n        hasReasonableSpineCount,\n        hasDistinctGroups,\n        hasExpectedRatio,\n        spineCount: potentialSpines.length,\n        leafCount: potentialLeaves.length,\n        spineNodes: igpNodes.filter(n => nodeDegrees[n.data.id] > averageDegree).map(n => n.data.id)\n      }\n    };\n  };\n\n  const getLayout = (elements) => {\n    const topology = detectTopology(elements);\n    console.log('Topology detection result:', topology);\n\n    if (topology.isClos) {\n      console.log('Applying CLOS layout');\n      return {\n        name: 'preset',\n        positions: (node) => {\n          const width = cyRef.current?.width() || 1000;\n          const height = cyRef.current?.height() || 800;\n          const type = node.data('type');\n          \n          console.log('Positioning node:', {\n            id: node.data('id'),\n            type: type,\n            width: width,\n            height: height\n          });\n\n          // Group nodes by type for counting\n          const nodesByType = {\n            spine: nodes.filter(n => n.data.type === 'igp_node' && n.data.vertexData?.role === 'spine'),\n            leaf: nodes.filter(n => n.data.type === 'igp_node' && n.data.vertexData?.role !== 'spine'),\n            bgp: nodes.filter(n => n.data.type === 'bgp_node'),\n            prefix: nodes.filter(n => n.data.type === 'ls_prefix')\n          };\n\n          // Calculate position based on node type\n          if (type === 'igp_node') {\n            const isSpine = node.data('vertexData')?.role === 'spine';\n            const typeNodes = isSpine ? nodesByType.spine : nodesByType.leaf;\n            const index = typeNodes.indexOf(node);\n            const total = typeNodes.length;\n\n            return {\n              x: width * (index + 1) / (total + 1),\n              y: isSpine ? height * 0.2 : height * 0.5\n            };\n          } else if (type === 'bgp_node') {\n            const index = nodesByType.bgp.indexOf(node);\n            const total = nodesByType.bgp.length;\n            return {\n              x: width * (index + 1) / (total + 1),\n              y: height * 0.35\n            };\n          } else if (type === 'ls_prefix') {\n            const index = nodesByType.prefix.indexOf(node);\n            const total = nodesByType.prefix.length;\n            return {\n              x: width * (index + 1) / (total + 1),\n              y: height * 0.8\n            };\n          }\n\n          return { x: width / 2, y: height / 2 };\n        },\n        fit: true,\n        padding: 50\n      };\n    } else {\n      console.log('Applying force-directed layout');\n      return {\n        name: 'cola',\n        animate: true,\n        refresh: 1,\n        maxSimulationTime: 3000,\n        nodeSpacing: 100,\n        edgeLength: 200,\n        randomize: true,\n        infinite: true\n      };\n    }\n  };\n\n  // Ensure layout is applied after graph data changes\n  useEffect(() => {\n    if (graphData && cyRef.current) {\n      console.log('Applying layout to graph');\n      const layout = getLayout(graphData);\n      if (layout) {\n        cyRef.current.layout(layout).run();\n      }\n    }\n  }, [graphData]);\n\n  const stylesheet = [\n    {\n      selector: 'node',\n      style: {\n        'background-color': (ele) => {\n          const nodeType = ele.data('type');\n          switch (nodeType) {\n            case 'igp_node':\n              return COLORS.node;\n            case 'bgp_node':\n              return COLORS.host;\n            case 'ls_prefix':\n              return COLORS.prefix;\n            default:\n              return COLORS.node;\n          }\n        },\n        'label': 'data(label)',\n        'width': 30,\n        'height': 30,\n        'color': COLORS.text,\n        'text-outline-width': 2,\n        'text-outline-color': '#fff',\n        'font-family': 'Consolas',\n        'font-size': '10px',\n        'text-wrap': 'wrap',\n        'text-max-width': '100px'\n      }\n    },\n    {\n      selector: 'edge',\n      style: {\n        'width': 1.5,\n        'line-color': COLORS.edge,\n        'curve-style': 'bezier',\n        'target-arrow-color': COLORS.edge,\n        'target-arrow-shape': 'triangle',\n        'arrow-scale': 0.8\n      }\n    }\n  ];\n\n  if (isLoading) {\n    return <div style={{ padding: '20px', fontFamily: 'Consolas' }}>Loading graph data...</div>;\n  }\n\n  if (error) {\n    return <div style={{ padding: '20px', color: 'red', fontFamily: 'Consolas' }}>{error}</div>;\n  }\n\n  if (!graphData) {\n    return <div style={{ padding: '20px', fontFamily: 'Consolas' }}>Select a graph to visualize</div>;\n  }\n\n  return (\n    <div className=\"network-graph-container\">\n      <Legend />\n      <div className=\"graph-area\">\n        <CytoscapeComponent\n          elements={graphData}\n          layout={getLayout(graphData)}\n          stylesheet={stylesheet}\n          cy={(cy) => { cyRef.current = cy; }}\n          style={{ width: '100%', height: '100%' }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default NetworkGraph; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}