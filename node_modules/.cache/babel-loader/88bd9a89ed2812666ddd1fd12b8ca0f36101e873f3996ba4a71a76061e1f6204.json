{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Locks = function () {\n  function Locks() {\n    this.locks = {};\n  }\n  Locks.prototype.add = function (id, x) {\n    this.locks[id] = x;\n  };\n  Locks.prototype.clear = function () {\n    this.locks = {};\n  };\n  Locks.prototype.isEmpty = function () {\n    for (var l in this.locks) return false;\n    return true;\n  };\n  Locks.prototype.apply = function (f) {\n    for (var l in this.locks) {\n      f(Number(l), this.locks[l]);\n    }\n  };\n  return Locks;\n}();\nexports.Locks = Locks;\nvar Descent = function () {\n  function Descent(x, D, G) {\n    if (G === void 0) {\n      G = null;\n    }\n    this.D = D;\n    this.G = G;\n    this.threshold = 0.0001;\n    this.numGridSnapNodes = 0;\n    this.snapGridSize = 100;\n    this.snapStrength = 1000;\n    this.scaleSnapByMaxH = false;\n    this.random = new PseudoRandom();\n    this.project = null;\n    this.x = x;\n    this.k = x.length;\n    var n = this.n = x[0].length;\n    this.H = new Array(this.k);\n    this.g = new Array(this.k);\n    this.Hd = new Array(this.k);\n    this.a = new Array(this.k);\n    this.b = new Array(this.k);\n    this.c = new Array(this.k);\n    this.d = new Array(this.k);\n    this.e = new Array(this.k);\n    this.ia = new Array(this.k);\n    this.ib = new Array(this.k);\n    this.xtmp = new Array(this.k);\n    this.locks = new Locks();\n    this.minD = Number.MAX_VALUE;\n    var i = n,\n      j;\n    while (i--) {\n      j = n;\n      while (--j > i) {\n        var d = D[i][j];\n        if (d > 0 && d < this.minD) {\n          this.minD = d;\n        }\n      }\n    }\n    if (this.minD === Number.MAX_VALUE) this.minD = 1;\n    i = this.k;\n    while (i--) {\n      this.g[i] = new Array(n);\n      this.H[i] = new Array(n);\n      j = n;\n      while (j--) {\n        this.H[i][j] = new Array(n);\n      }\n      this.Hd[i] = new Array(n);\n      this.a[i] = new Array(n);\n      this.b[i] = new Array(n);\n      this.c[i] = new Array(n);\n      this.d[i] = new Array(n);\n      this.e[i] = new Array(n);\n      this.ia[i] = new Array(n);\n      this.ib[i] = new Array(n);\n      this.xtmp[i] = new Array(n);\n    }\n  }\n  Descent.createSquareMatrix = function (n, f) {\n    var M = new Array(n);\n    for (var i = 0; i < n; ++i) {\n      M[i] = new Array(n);\n      for (var j = 0; j < n; ++j) {\n        M[i][j] = f(i, j);\n      }\n    }\n    return M;\n  };\n  Descent.prototype.offsetDir = function () {\n    var _this = this;\n    var u = new Array(this.k);\n    var l = 0;\n    for (var i = 0; i < this.k; ++i) {\n      var x = u[i] = this.random.getNextBetween(0.01, 1) - 0.5;\n      l += x * x;\n    }\n    l = Math.sqrt(l);\n    return u.map(function (x) {\n      return x *= _this.minD / l;\n    });\n  };\n  Descent.prototype.computeDerivatives = function (x) {\n    var _this = this;\n    var n = this.n;\n    if (n < 1) return;\n    var i;\n    var d = new Array(this.k);\n    var d2 = new Array(this.k);\n    var Huu = new Array(this.k);\n    var maxH = 0;\n    for (var u = 0; u < n; ++u) {\n      for (i = 0; i < this.k; ++i) Huu[i] = this.g[i][u] = 0;\n      for (var v = 0; v < n; ++v) {\n        if (u === v) continue;\n        var maxDisplaces = n;\n        while (maxDisplaces--) {\n          var sd2 = 0;\n          for (i = 0; i < this.k; ++i) {\n            var dx = d[i] = x[i][u] - x[i][v];\n            sd2 += d2[i] = dx * dx;\n          }\n          if (sd2 > 1e-9) break;\n          var rd = this.offsetDir();\n          for (i = 0; i < this.k; ++i) x[i][v] += rd[i];\n        }\n        var l = Math.sqrt(sd2);\n        var D = this.D[u][v];\n        var weight = this.G != null ? this.G[u][v] : 1;\n        if (weight > 1 && l > D || !isFinite(D)) {\n          for (i = 0; i < this.k; ++i) this.H[i][u][v] = 0;\n          continue;\n        }\n        if (weight > 1) {\n          weight = 1;\n        }\n        var D2 = D * D;\n        var gs = 2 * weight * (l - D) / (D2 * l);\n        var l3 = l * l * l;\n        var hs = 2 * -weight / (D2 * l3);\n        if (!isFinite(gs)) console.log(gs);\n        for (i = 0; i < this.k; ++i) {\n          this.g[i][u] += d[i] * gs;\n          Huu[i] -= this.H[i][u][v] = hs * (l3 + D * (d2[i] - sd2) + l * sd2);\n        }\n      }\n      for (i = 0; i < this.k; ++i) maxH = Math.max(maxH, this.H[i][u][u] = Huu[i]);\n    }\n    var r = this.snapGridSize / 2;\n    var g = this.snapGridSize;\n    var w = this.snapStrength;\n    var k = w / (r * r);\n    var numNodes = this.numGridSnapNodes;\n    for (var u = 0; u < numNodes; ++u) {\n      for (i = 0; i < this.k; ++i) {\n        var xiu = this.x[i][u];\n        var m = xiu / g;\n        var f = m % 1;\n        var q = m - f;\n        var a = Math.abs(f);\n        var dx = a <= 0.5 ? xiu - q * g : xiu > 0 ? xiu - (q + 1) * g : xiu - (q - 1) * g;\n        if (-r < dx && dx <= r) {\n          if (this.scaleSnapByMaxH) {\n            this.g[i][u] += maxH * k * dx;\n            this.H[i][u][u] += maxH * k;\n          } else {\n            this.g[i][u] += k * dx;\n            this.H[i][u][u] += k;\n          }\n        }\n      }\n    }\n    if (!this.locks.isEmpty()) {\n      this.locks.apply(function (u, p) {\n        for (i = 0; i < _this.k; ++i) {\n          _this.H[i][u][u] += maxH;\n          _this.g[i][u] -= maxH * (p[i] - x[i][u]);\n        }\n      });\n    }\n  };\n  Descent.dotProd = function (a, b) {\n    var x = 0,\n      i = a.length;\n    while (i--) x += a[i] * b[i];\n    return x;\n  };\n  Descent.rightMultiply = function (m, v, r) {\n    var i = m.length;\n    while (i--) r[i] = Descent.dotProd(m[i], v);\n  };\n  Descent.prototype.computeStepSize = function (d) {\n    var numerator = 0,\n      denominator = 0;\n    for (var i = 0; i < this.k; ++i) {\n      numerator += Descent.dotProd(this.g[i], d[i]);\n      Descent.rightMultiply(this.H[i], d[i], this.Hd[i]);\n      denominator += Descent.dotProd(d[i], this.Hd[i]);\n    }\n    if (denominator === 0 || !isFinite(denominator)) return 0;\n    return 1 * numerator / denominator;\n  };\n  Descent.prototype.reduceStress = function () {\n    this.computeDerivatives(this.x);\n    var alpha = this.computeStepSize(this.g);\n    for (var i = 0; i < this.k; ++i) {\n      this.takeDescentStep(this.x[i], this.g[i], alpha);\n    }\n    return this.computeStress();\n  };\n  Descent.copy = function (a, b) {\n    var m = a.length,\n      n = b[0].length;\n    for (var i = 0; i < m; ++i) {\n      for (var j = 0; j < n; ++j) {\n        b[i][j] = a[i][j];\n      }\n    }\n  };\n  Descent.prototype.stepAndProject = function (x0, r, d, stepSize) {\n    Descent.copy(x0, r);\n    this.takeDescentStep(r[0], d[0], stepSize);\n    if (this.project) this.project[0](x0[0], x0[1], r[0]);\n    this.takeDescentStep(r[1], d[1], stepSize);\n    if (this.project) this.project[1](r[0], x0[1], r[1]);\n    for (var i = 2; i < this.k; i++) this.takeDescentStep(r[i], d[i], stepSize);\n  };\n  Descent.mApply = function (m, n, f) {\n    var i = m;\n    while (i-- > 0) {\n      var j = n;\n      while (j-- > 0) f(i, j);\n    }\n  };\n  Descent.prototype.matrixApply = function (f) {\n    Descent.mApply(this.k, this.n, f);\n  };\n  Descent.prototype.computeNextPosition = function (x0, r) {\n    var _this = this;\n    this.computeDerivatives(x0);\n    var alpha = this.computeStepSize(this.g);\n    this.stepAndProject(x0, r, this.g, alpha);\n    if (this.project) {\n      this.matrixApply(function (i, j) {\n        return _this.e[i][j] = x0[i][j] - r[i][j];\n      });\n      var beta = this.computeStepSize(this.e);\n      beta = Math.max(0.2, Math.min(beta, 1));\n      this.stepAndProject(x0, r, this.e, beta);\n    }\n  };\n  Descent.prototype.run = function (iterations) {\n    var stress = Number.MAX_VALUE,\n      converged = false;\n    while (!converged && iterations-- > 0) {\n      var s = this.rungeKutta();\n      converged = Math.abs(stress / s - 1) < this.threshold;\n      stress = s;\n    }\n    return stress;\n  };\n  Descent.prototype.rungeKutta = function () {\n    var _this = this;\n    this.computeNextPosition(this.x, this.a);\n    Descent.mid(this.x, this.a, this.ia);\n    this.computeNextPosition(this.ia, this.b);\n    Descent.mid(this.x, this.b, this.ib);\n    this.computeNextPosition(this.ib, this.c);\n    this.computeNextPosition(this.c, this.d);\n    var disp = 0;\n    this.matrixApply(function (i, j) {\n      var x = (_this.a[i][j] + 2.0 * _this.b[i][j] + 2.0 * _this.c[i][j] + _this.d[i][j]) / 6.0,\n        d = _this.x[i][j] - x;\n      disp += d * d;\n      _this.x[i][j] = x;\n    });\n    return disp;\n  };\n  Descent.mid = function (a, b, m) {\n    Descent.mApply(a.length, a[0].length, function (i, j) {\n      return m[i][j] = a[i][j] + (b[i][j] - a[i][j]) / 2.0;\n    });\n  };\n  Descent.prototype.takeDescentStep = function (x, d, stepSize) {\n    for (var i = 0; i < this.n; ++i) {\n      x[i] = x[i] - stepSize * d[i];\n    }\n  };\n  Descent.prototype.computeStress = function () {\n    var stress = 0;\n    for (var u = 0, nMinus1 = this.n - 1; u < nMinus1; ++u) {\n      for (var v = u + 1, n = this.n; v < n; ++v) {\n        var l = 0;\n        for (var i = 0; i < this.k; ++i) {\n          var dx = this.x[i][u] - this.x[i][v];\n          l += dx * dx;\n        }\n        l = Math.sqrt(l);\n        var d = this.D[u][v];\n        if (!isFinite(d)) continue;\n        var rl = d - l;\n        var d2 = d * d;\n        stress += rl * rl / d2;\n      }\n    }\n    return stress;\n  };\n  Descent.zeroDistance = 1e-10;\n  return Descent;\n}();\nexports.Descent = Descent;\nvar PseudoRandom = function () {\n  function PseudoRandom(seed) {\n    if (seed === void 0) {\n      seed = 1;\n    }\n    this.seed = seed;\n    this.a = 214013;\n    this.c = 2531011;\n    this.m = 2147483648;\n    this.range = 32767;\n  }\n  PseudoRandom.prototype.getNext = function () {\n    this.seed = (this.seed * this.a + this.c) % this.m;\n    return (this.seed >> 16) / this.range;\n  };\n  PseudoRandom.prototype.getNextBetween = function (min, max) {\n    return min + this.getNext() * (max - min);\n  };\n  return PseudoRandom;\n}();\nexports.PseudoRandom = PseudoRandom;","map":{"version":3,"names":["Locks","locks","prototype","add","id","x","clear","isEmpty","l","apply","f","Number","exports","Descent","D","G","threshold","numGridSnapNodes","snapGridSize","snapStrength","scaleSnapByMaxH","random","PseudoRandom","project","k","length","n","H","Array","g","Hd","a","b","c","d","e","ia","ib","xtmp","minD","MAX_VALUE","i","j","createSquareMatrix","M","offsetDir","_this","u","getNextBetween","Math","sqrt","map","computeDerivatives","d2","Huu","maxH","v","maxDisplaces","sd2","dx","rd","weight","isFinite","D2","gs","l3","hs","console","log","max","r","w","numNodes","xiu","m","q","abs","p","dotProd","rightMultiply","computeStepSize","numerator","denominator","reduceStress","alpha","takeDescentStep","computeStress","copy","stepAndProject","x0","stepSize","mApply","matrixApply","computeNextPosition","beta","min","run","iterations","stress","converged","s","rungeKutta","mid","disp","nMinus1","rl","zeroDistance","seed","range","getNext"],"sources":["/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/node_modules/webcola/WebCola/src/descent.ts"],"sourcesContent":["    /**\r\n     * Descent respects a collection of locks over nodes that should not move\r\n     * @class Locks\r\n     */\r\n    export class Locks {\r\n        locks: { [key:number]:number[]} = {};\r\n        /**\r\n         * add a lock on the node at index id\r\n         * @method add\r\n         * @param id index of node to be locked\r\n         * @param x required position for node\r\n         */\r\n        add(id: number, x: number[]) {\r\n/* DEBUG\r\n            if (isNaN(x[0]) || isNaN(x[1])) debugger;\r\nDEBUG */\r\n            this.locks[id] = x;\r\n        }\r\n        /**\r\n         * @method clear clear all locks\r\n         */\r\n        clear() {\r\n            this.locks = {};\r\n        }\r\n        /**\r\n         * @isEmpty\r\n         * @returns false if no locks exist\r\n         */\r\n        isEmpty(): boolean {\r\n            for (var l in this.locks) return false;\r\n            return true;\r\n        }\r\n        /**\r\n         * perform an operation on each lock\r\n         * @apply\r\n         */\r\n        apply(f: (id: number, x: number[]) => void) {\r\n            for (var l in this.locks) {\r\n                f(Number(l), this.locks[l]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Uses a gradient descent approach to reduce a stress or p-stress goal function over a graph with specified ideal edge lengths or a square matrix of dissimilarities.\r\n     * The standard stress function over a graph nodes with position vectors x,y,z is (mathematica input):\r\n     *   stress[x_,y_,z_,D_,w_]:=Sum[w[[i,j]] (length[x[[i]],y[[i]],z[[i]],x[[j]],y[[j]],z[[j]]]-d[[i,j]])^2,{i,Length[x]-1},{j,i+1,Length[x]}]\r\n     * where: D is a square matrix of ideal separations between nodes, w is matrix of weights for those separations\r\n     *        length[x1_, y1_, z1_, x2_, y2_, z2_] = Sqrt[(x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2]\r\n     * below, we use wij = 1/(Dij^2)\r\n     *\r\n     * @class Descent\r\n     */\r\n    export class Descent {\r\n        public threshold: number = 0.0001;\r\n        /** Hessian Matrix\r\n         * @property H {number[][][]}\r\n         */\r\n        public H: number[][][];\r\n        /** gradient vector\r\n         * @property G {number[][]}\r\n         */\r\n        public g: number[][];\r\n        /** positions vector\r\n         * @property x {number[][]}\r\n         */\r\n        public x: number[][];\r\n        /**\r\n         * @property k {number} dimensionality\r\n         */\r\n        public k: number;\r\n        /**\r\n         * number of data-points / nodes / size of vectors/matrices\r\n         * @property n {number}\r\n         */\r\n        public n: number;\r\n\r\n        public locks: Locks;\r\n\r\n        private static zeroDistance: number = 1e-10;\r\n        private minD: number;\r\n\r\n        // pool of arrays of size n used internally, allocated in constructor\r\n        private Hd: number[][];\r\n        private a: number[][];\r\n        private b: number[][];\r\n        private c: number[][];\r\n        private d: number[][];\r\n        private e: number[][];\r\n        private ia: number[][];\r\n        private ib: number[][];\r\n        private xtmp: number[][];\r\n\r\n\r\n        // Parameters for grid snap stress.\r\n        // TODO: Make a pluggable \"StressTerm\" class instead of this\r\n        // mess.\r\n        public numGridSnapNodes: number = 0;\r\n        public snapGridSize: number = 100;\r\n        public snapStrength: number = 1000;\r\n        public scaleSnapByMaxH: boolean = false;\r\n\r\n        private random = new PseudoRandom();\r\n\r\n        public project: { (x0: number[], y0: number[], r: number[]): void }[] = null;\r\n\r\n        /**\r\n         * @method constructor\r\n         * @param x {number[][]} initial coordinates for nodes\r\n         * @param D {number[][]} matrix of desired distances between pairs of nodes\r\n         * @param G {number[][]} [default=null] if specified, G is a matrix of weights for goal terms between pairs of nodes.\r\n         * If G[i][j] > 1 and the separation between nodes i and j is greater than their ideal distance, then there is no contribution for this pair to the goal\r\n         * If G[i][j] <= 1 then it is used as a weighting on the contribution of the variance between ideal and actual separation between i and j to the goal function\r\n         */\r\n        constructor(x: number[][], public D: number[][], public G: number[][]= null) {\r\n            this.x = x;\r\n            this.k = x.length; // dimensionality\r\n            var n = this.n = x[0].length; // number of nodes\r\n            this.H = new Array(this.k);\r\n            this.g = new Array(this.k);\r\n            this.Hd = new Array(this.k);\r\n            this.a = new Array(this.k);\r\n            this.b = new Array(this.k);\r\n            this.c = new Array(this.k);\r\n            this.d = new Array(this.k);\r\n            this.e = new Array(this.k);\r\n            this.ia = new Array(this.k);\r\n            this.ib = new Array(this.k);\r\n            this.xtmp = new Array(this.k);\r\n            this.locks = new Locks();\r\n            this.minD = Number.MAX_VALUE;\r\n            var i = n, j;\r\n            while (i--) {\r\n                j = n;\r\n                while (--j > i) {\r\n                    var d = D[i][j];\r\n                    if (d > 0 && d < this.minD) {\r\n                        this.minD = d;\r\n                    }\r\n                }\r\n            }\r\n            if (this.minD === Number.MAX_VALUE) this.minD = 1;\r\n            i = this.k;\r\n            while (i--) {\r\n                this.g[i] = new Array(n);\r\n                this.H[i] = new Array(n);\r\n                j = n;\r\n                while (j--) {\r\n                    this.H[i][j] = new Array(n);\r\n                }\r\n                this.Hd[i] = new Array(n);\r\n                this.a[i] = new Array(n);\r\n                this.b[i] = new Array(n);\r\n                this.c[i] = new Array(n);\r\n                this.d[i] = new Array(n);\r\n                this.e[i] = new Array(n);\r\n                this.ia[i] = new Array(n);\r\n                this.ib[i] = new Array(n);\r\n                this.xtmp[i] = new Array(n);\r\n            }\r\n        }\r\n\r\n        public static createSquareMatrix(n: number, f: (i: number, j: number) => number): number[][] {\r\n            var M = new Array(n);\r\n            for (var i = 0; i < n; ++i) {\r\n                M[i] = new Array(n);\r\n                for (var j = 0; j < n; ++j) {\r\n                    M[i][j] = f(i, j);\r\n                }\r\n            }\r\n            return M;\r\n        }\r\n\r\n        private offsetDir(): number[] {\r\n            var u = new Array(this.k);\r\n            var l = 0;\r\n            for (var i = 0; i < this.k; ++i) {\r\n                var x = u[i] = this.random.getNextBetween(0.01, 1) - 0.5;\r\n                l += x * x;\r\n            }\r\n            l = Math.sqrt(l);\r\n            return u.map(x=> x *= this.minD / l);\r\n        }\r\n\r\n        // compute first and second derivative information storing results in this.g and this.H\r\n        public computeDerivatives(x: number[][]) {\r\n            var n: number = this.n;\r\n            if (n < 1) return;\r\n            var i: number;\r\n/* DEBUG\r\n            for (var u: number = 0; u < n; ++u)\r\n                for (i = 0; i < this.k; ++i)\r\n                    if (isNaN(x[i][u])) debugger;\r\nDEBUG */\r\n            var d: number[] = new Array(this.k);\r\n            var d2: number[] = new Array(this.k);\r\n            var Huu: number[] = new Array(this.k);\r\n            var maxH: number = 0;\r\n            for (var u: number = 0; u < n; ++u) {\r\n                for (i = 0; i < this.k; ++i) Huu[i] = this.g[i][u] = 0;\r\n                for (var v = 0; v < n; ++v) {\r\n                    if (u === v) continue;\r\n\r\n                    // The following loop randomly displaces nodes that are at identical positions\r\n                    var maxDisplaces = n; // avoid infinite loop in the case of numerical issues, such as huge values\r\n                    while (maxDisplaces--) {\r\n                        var sd2 = 0;\r\n                        for (i = 0; i < this.k; ++i) {\r\n                            var dx = d[i] = x[i][u] - x[i][v];\r\n                            sd2 += d2[i] = dx * dx;\r\n                        }\r\n                        if (sd2 > 1e-9) break;\r\n                        var rd = this.offsetDir();\r\n                        for (i = 0; i < this.k; ++i) x[i][v] += rd[i];\r\n                    }\r\n                    var l: number = Math.sqrt(sd2);\r\n                    var D: number = this.D[u][v];\r\n                    var weight = this.G != null ? this.G[u][v] : 1;\r\n                    if (weight > 1 && l > D || !isFinite(D)) {\r\n                        for (i = 0; i < this.k; ++i) this.H[i][u][v] = 0;\r\n                        continue;\r\n                    }\r\n                    if (weight > 1) {\r\n                        weight = 1;\r\n                    }\r\n                    var D2: number = D * D;\r\n                    var gs: number = 2 * weight * (l - D) / (D2 * l);\r\n                    var l3 = l * l * l;\r\n                    var hs: number = 2 * -weight / (D2 * l3);\r\n                    if (!isFinite(gs))\r\n                        console.log(gs);\r\n                    for (i = 0; i < this.k; ++i) {\r\n                        this.g[i][u] += d[i] * gs;\r\n                        Huu[i] -= this.H[i][u][v] = hs * (l3 + D * (d2[i] - sd2) + l * sd2);\r\n                    }\r\n                }\r\n                for (i = 0; i < this.k; ++i) maxH = Math.max(maxH, this.H[i][u][u] = Huu[i]);\r\n            }\r\n            // Grid snap forces\r\n            var r = this.snapGridSize/2;\r\n            var g = this.snapGridSize;\r\n            var w = this.snapStrength;\r\n            var k = w / (r * r);\r\n            var numNodes = this.numGridSnapNodes;\r\n            //var numNodes = n;\r\n            for (var u: number = 0; u < numNodes; ++u) {\r\n                for (i = 0; i < this.k; ++i) {\r\n                    var xiu = this.x[i][u];\r\n                    var m = xiu / g;\r\n                    var f = m % 1;\r\n                    var q = m - f;\r\n                    var a = Math.abs(f);\r\n                    var dx = (a <= 0.5) ? xiu - q * g :\r\n                        (xiu > 0) ? xiu - (q + 1) * g : xiu - (q - 1) * g;\r\n                    if (-r < dx && dx <= r) {\r\n                        if (this.scaleSnapByMaxH) {\r\n                            this.g[i][u] += maxH * k * dx;\r\n                            this.H[i][u][u] += maxH * k;\r\n                        } else {\r\n                            this.g[i][u] += k * dx;\r\n                            this.H[i][u][u] += k;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!this.locks.isEmpty()) {\r\n                this.locks.apply((u, p) => {\r\n                    for (i = 0; i < this.k; ++i) {\r\n                        this.H[i][u][u] += maxH;\r\n                        this.g[i][u] -= maxH * (p[i] - x[i][u]);\r\n                    }\r\n                });\r\n            }\r\n/* DEBUG\r\n            for (var u: number = 0; u < n; ++u)\r\n                for (i = 0; i < this.k; ++i) {\r\n                    if (isNaN(this.g[i][u])) debugger;\r\n                    for (var v: number = 0; v < n; ++v)\r\n                        if (isNaN(this.H[i][u][v])) debugger;\r\n                }\r\nDEBUG */\r\n        }\r\n\r\n        private static dotProd(a: number[], b: number[]): number {\r\n            var x = 0, i = a.length;\r\n            while (i--) x += a[i] * b[i];\r\n            return x;\r\n        }\r\n\r\n        // result r = matrix m * vector v\r\n        private static rightMultiply(m: number[][], v: number[], r: number[]) {\r\n            var i = m.length;\r\n            while (i--) r[i] = Descent.dotProd(m[i], v);\r\n        }\r\n\r\n        // computes the optimal step size to take in direction d using the\r\n        // derivative information in this.g and this.H\r\n        // returns the scalar multiplier to apply to d to get the optimal step\r\n        public computeStepSize(d: number[][]): number {\r\n            var numerator = 0, denominator = 0;\r\n            for (var i = 0; i < this.k; ++i) {\r\n                numerator += Descent.dotProd(this.g[i], d[i]);\r\n                Descent.rightMultiply(this.H[i], d[i], this.Hd[i]);\r\n                denominator += Descent.dotProd(d[i], this.Hd[i]);\r\n            }\r\n            if (denominator === 0 || !isFinite(denominator)) return 0;\r\n            return 1 * numerator / denominator;\r\n        }\r\n\r\n        public reduceStress(): number {\r\n            this.computeDerivatives(this.x);\r\n            var alpha = this.computeStepSize(this.g);\r\n            for (var i = 0; i < this.k; ++i) {\r\n                this.takeDescentStep(this.x[i], this.g[i], alpha);\r\n            }\r\n            return this.computeStress();\r\n        }\r\n\r\n        private static copy(a: number[][], b: number[][]): void {\r\n            var m = a.length, n = b[0].length;\r\n            for (var i = 0; i < m; ++i) {\r\n                for (var j = 0; j < n; ++j) {\r\n                    b[i][j] = a[i][j];\r\n                }\r\n            }\r\n        }\r\n\r\n        // takes a step of stepSize * d from x0, and then project against any constraints.\r\n        // result is returned in r.\r\n        // x0: starting positions\r\n        // r: result positions will be returned here\r\n        // d: unconstrained descent vector\r\n        // stepSize: amount to step along d\r\n        private stepAndProject(x0: number[][], r: number[][], d: number[][], stepSize: number): void {\r\n            Descent.copy(x0, r);\r\n            this.takeDescentStep(r[0], d[0], stepSize);\r\n            if (this.project) this.project[0](x0[0], x0[1], r[0]);\r\n            this.takeDescentStep(r[1], d[1], stepSize);\r\n            if (this.project) this.project[1](r[0], x0[1], r[1]);\r\n\r\n            // todo: allow projection against constraints in higher dimensions\r\n            for (var i = 2; i < this.k; i++)\r\n                this.takeDescentStep(r[i], d[i], stepSize);\r\n\r\n            // the following makes locks extra sticky... but hides the result of the projection from the consumer\r\n            //if (!this.locks.isEmpty()) {\r\n            //    this.locks.apply((u, p) => {\r\n            //        for (var i = 0; i < this.k; i++) {\r\n            //            r[i][u] = p[i];\r\n            //        }\r\n            //    });\r\n            //}\r\n        }\r\n\r\n        private static mApply(m: number, n: number, f: (i: number, j: number) => any) {\r\n            var i = m; while (i-- > 0) {\r\n                var j = n; while (j-- > 0) f(i, j);\r\n            }\r\n        }\r\n        private matrixApply(f: (i: number, j: number) => any) {\r\n            Descent.mApply(this.k, this.n, f);\r\n        }\r\n\r\n        private computeNextPosition(x0: number[][], r: number[][]): void {\r\n            this.computeDerivatives(x0);\r\n            var alpha = this.computeStepSize(this.g);\r\n            this.stepAndProject(x0, r, this.g, alpha);\r\n/* DEBUG\r\n            for (var u: number = 0; u < this.n; ++u)\r\n                for (var i = 0; i < this.k; ++i)\r\n                    if (isNaN(r[i][u])) debugger;\r\nDEBUG */\r\n            if (this.project) {\r\n                this.matrixApply((i, j) => this.e[i][j] = x0[i][j] - r[i][j]);\r\n                var beta = this.computeStepSize(this.e);\r\n                beta = Math.max(0.2, Math.min(beta, 1));\r\n                this.stepAndProject(x0, r, this.e, beta);\r\n            }\r\n        }\r\n\r\n        public run(iterations: number): number {\r\n            var stress = Number.MAX_VALUE, converged = false;\r\n            while (!converged && iterations-- > 0) {\r\n                var s = this.rungeKutta();\r\n                converged = Math.abs(stress / s - 1) < this.threshold;\r\n                stress = s;\r\n            }\r\n            return stress;\r\n        }\r\n\r\n        public rungeKutta(): number {\r\n            this.computeNextPosition(this.x, this.a);\r\n            Descent.mid(this.x, this.a, this.ia);\r\n            this.computeNextPosition(this.ia, this.b);\r\n            Descent.mid(this.x, this.b, this.ib);\r\n            this.computeNextPosition(this.ib, this.c);\r\n            this.computeNextPosition(this.c, this.d);\r\n            var disp = 0;\r\n            this.matrixApply((i, j) => {\r\n                var x = (this.a[i][j] + 2.0 * this.b[i][j] + 2.0 * this.c[i][j] + this.d[i][j]) / 6.0,\r\n                    d = this.x[i][j] - x;\r\n                disp += d * d;\r\n                this.x[i][j] = x;\r\n            });\r\n            return disp;\r\n        }\r\n\r\n        private static mid(a: number[][], b: number[][], m: number[][]): void {\r\n            Descent.mApply(a.length, a[0].length, (i, j) =>\r\n                m[i][j] = a[i][j] + (b[i][j] - a[i][j]) / 2.0);\r\n        }\r\n\r\n        public takeDescentStep(x: number[], d: number[], stepSize: number): void {\r\n            for (var i = 0; i < this.n; ++i) {\r\n                x[i] = x[i] - stepSize * d[i];\r\n            }\r\n        }\r\n\r\n        public computeStress(): number {\r\n            var stress = 0;\r\n            for (var u = 0, nMinus1 = this.n - 1; u < nMinus1; ++u) {\r\n                for (var v = u + 1, n = this.n; v < n; ++v) {\r\n                    var l = 0;\r\n                    for (var i = 0; i < this.k; ++i) {\r\n                        var dx = this.x[i][u] - this.x[i][v];\r\n                        l += dx * dx;\r\n                    }\r\n                    l = Math.sqrt(l);\r\n                    var d = this.D[u][v];\r\n                    if (!isFinite(d)) continue;\r\n                    var rl = d - l;\r\n                    var d2 = d * d;\r\n                    stress += rl * rl / d2;\r\n                }\r\n            }\r\n            return stress;\r\n        }\r\n    }\r\n\r\n    // Linear congruential pseudo random number generator\r\n    export class PseudoRandom {\r\n        private a: number = 214013;\r\n        private c: number = 2531011;\r\n        private m: number = 2147483648;\r\n        private range: number = 32767;\r\n\r\n        constructor(public seed: number = 1) { }\r\n\r\n        // random real between 0 and 1\r\n        getNext(): number {\r\n            this.seed = (this.seed * this.a + this.c) % this.m;\r\n            return (this.seed >> 16) / this.range;\r\n        }\r\n\r\n        // random real between min and max\r\n        getNextBetween(min: number, max: number) {\r\n            return min + this.getNext() * (max - min);\r\n        }\r\n    }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}