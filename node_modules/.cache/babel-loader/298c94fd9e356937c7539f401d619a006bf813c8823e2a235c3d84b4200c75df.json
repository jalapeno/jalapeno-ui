{"ast":null,"code":"var _jsxFileName = \"/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/src/components/NetworkGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport popper from 'cytoscape-popper';\nimport tippy from 'tippy.js';\nimport 'tippy.js/dist/tippy.css';\nimport { apiUrl } from '../config';\nimport '../styles/NetworkGraph.css';\n\n// Define colors as constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = {\n  node: '#CC4A04',\n  // Default node color (Cayenne orange)\n  prefix: '#002921',\n  // Color for prefixes\n  host: '#1E88E5',\n  // Blue for future host nodes\n  service: '#7CB342',\n  // Green for future service nodes\n  gpu: '#6D4C41',\n  // Brown for future GPU nodes\n  text: '#000',\n  // Black\n  edge: '#1a365d' // Blue\n};\n\n// Register the cola layout\ncytoscape.use(cola);\n\n// Register the popper extension\ncytoscape.use(popper);\nconst Legend = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"graph-legend\",\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"Legend\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"legend-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"legend-color\",\n      style: {\n        backgroundColor: COLORS.node\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Nodes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"legend-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"legend-color\",\n      style: {\n        backgroundColor: COLORS.prefix\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Prefixes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 29,\n  columnNumber: 3\n}, this);\n_c = Legend;\nconst NetworkGraph = ({\n  collection\n}) => {\n  _s();\n  const cyRef = useRef(null);\n  const [graphData, setGraphData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const tooltipsRef = useRef(new Set());\n\n  // Clean up tooltips when component unmounts\n  useEffect(() => {\n    return () => {\n      tooltipsRef.current.forEach(tooltip => tooltip.destroy());\n      tooltipsRef.current.clear();\n    };\n  }, []);\n\n  // Initialize tooltips after graph is rendered\n  const initializeTooltips = cy => {\n    // Remove any existing tooltips\n    tooltipsRef.current.forEach(tooltip => tooltip.destroy());\n    tooltipsRef.current.clear();\n    cy.nodes().forEach(node => {\n      const ref = node.popperRef();\n      const tip = tippy(ref, {\n        content: () => {\n          const content = document.createElement('div');\n          content.classList.add('tooltip-content');\n          const type = node.data('type');\n          const label = node.data('label');\n          content.innerHTML = `\n            <div class=\"tooltip-header\">${type}</div>\n            <div class=\"tooltip-body\">\n              <div>ID: ${label}</div>\n              ${node.data('info') ? `<div>${node.data('info')}</div>` : ''}\n            </div>\n          `;\n          return content;\n        },\n        trigger: 'manual',\n        placement: 'top',\n        arrow: true,\n        interactive: true\n      });\n      tooltipsRef.current.add(tip);\n      node.on('mouseover', () => tip.show());\n      node.on('mouseout', () => tip.hide());\n    });\n  };\n  useEffect(() => {\n    const loadGraphData = async () => {\n      if (!collection) return;\n      setIsLoading(true);\n      setError(null);\n      try {\n        console.log('Fetching from:', `${apiUrl}/api/v1/collections/${collection}/edges`);\n        const response = await fetch(`${apiUrl}/api/v1/collections/${collection}/edges`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Received data:', data);\n        const elements = transformDataToCytoscape(data);\n        setGraphData(elements);\n      } catch (err) {\n        console.error('Detailed error:', err);\n        setError(`Failed to load graph data: ${err.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadGraphData();\n  }, [collection]);\n  const transformDataToCytoscape = data => {\n    const elements = {\n      nodes: new Set(),\n      edges: new Set()\n    };\n    if (!data) return [];\n    const edgesData = Array.isArray(data) ? data : data.edges || data.data || [];\n    const getEdgeId = (from, to) => {\n      const nodes = [from, to].sort();\n      return `${nodes[0]}-${nodes[1]}`;\n    };\n    edgesData.forEach(item => {\n      if (item._from && item._to) {\n        // Add nodes with any additional info from the API\n        elements.nodes.add({\n          data: {\n            id: item._from,\n            label: item._from.split('/')[1],\n            type: item._from.split('/')[0],\n            info: item.from_info || '' // Additional info if provided by API\n          }\n        });\n        elements.nodes.add({\n          data: {\n            id: item._to,\n            label: item._to.split('/')[1],\n            type: item._to.split('/')[0],\n            info: item.to_info || '' // Additional info if provided by API\n          }\n        });\n        const edgeId = getEdgeId(item._from, item._to);\n        elements.edges.add({\n          data: {\n            id: edgeId,\n            source: item._from,\n            target: item._to,\n            info: item.edge_info || '' // Additional edge info if provided\n          }\n        });\n      }\n    });\n    return [...Array.from(elements.nodes), ...Array.from(elements.edges)];\n  };\n  const layout = {\n    name: 'cola',\n    animate: true,\n    refresh: 1,\n    maxSimulationTime: 3000,\n    nodeSpacing: 100,\n    edgeLength: 200,\n    randomize: true,\n    infinite: true\n  };\n  const stylesheet = [{\n    selector: 'node',\n    style: {\n      'background-color': ele => {\n        const nodeType = ele.data('type');\n        return nodeType.includes('prefix') ? COLORS.prefix : COLORS.node;\n      },\n      'label': 'data(label)',\n      'width': 30,\n      'height': 30,\n      'color': COLORS.text,\n      'text-outline-width': 2,\n      'text-outline-color': '#fff',\n      'font-family': 'Consolas',\n      'font-size': '10px',\n      'text-wrap': 'wrap',\n      'text-max-width': '100px'\n    }\n  }, {\n    selector: 'edge',\n    style: {\n      'width': 1.5,\n      'line-color': COLORS.edge,\n      'curve-style': 'bezier',\n      'target-arrow-color': COLORS.edge,\n      'target-arrow-shape': 'triangle',\n      'arrow-scale': 0.8\n    }\n  }];\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        fontFamily: 'Consolas'\n      },\n      children: \"Loading graph data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        color: 'red',\n        fontFamily: 'Consolas'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 12\n    }, this);\n  }\n  if (!graphData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        fontFamily: 'Consolas'\n      },\n      children: \"Select a graph to visualize\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"network-graph-container\",\n    children: [/*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-area\",\n      children: /*#__PURE__*/_jsxDEV(CytoscapeComponent, {\n        elements: graphData,\n        layout: layout,\n        stylesheet: stylesheet,\n        cy: cy => {\n          cyRef.current = cy;\n          initializeTooltips(cy);\n        },\n        style: {\n          width: '100%',\n          height: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n};\n_s(NetworkGraph, \"j/aOomMZs6QxSH1yMHwCAn8m8gI=\");\n_c2 = NetworkGraph;\nexport default NetworkGraph;\nvar _c, _c2;\n$RefreshReg$(_c, \"Legend\");\n$RefreshReg$(_c2, \"NetworkGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","CytoscapeComponent","cytoscape","cola","popper","tippy","apiUrl","jsxDEV","_jsxDEV","COLORS","node","prefix","host","service","gpu","text","edge","use","Legend","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","_c","NetworkGraph","collection","_s","cyRef","graphData","setGraphData","isLoading","setIsLoading","error","setError","tooltipsRef","Set","current","forEach","tooltip","destroy","clear","initializeTooltips","cy","nodes","ref","popperRef","tip","content","document","createElement","classList","add","type","data","label","innerHTML","trigger","placement","arrow","interactive","on","show","hide","loadGraphData","console","log","response","fetch","ok","Error","status","json","elements","transformDataToCytoscape","err","message","edges","edgesData","Array","isArray","getEdgeId","from","to","sort","item","_from","_to","id","split","info","from_info","to_info","edgeId","source","target","edge_info","layout","name","animate","refresh","maxSimulationTime","nodeSpacing","edgeLength","randomize","infinite","stylesheet","selector","ele","nodeType","includes","padding","fontFamily","color","width","height","_c2","$RefreshReg$"],"sources":["/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/src/components/NetworkGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport popper from 'cytoscape-popper';\nimport tippy from 'tippy.js';\nimport 'tippy.js/dist/tippy.css';\nimport { apiUrl } from '../config';\nimport '../styles/NetworkGraph.css';\n\n// Define colors as constants\nconst COLORS = {\n  node: '#CC4A04',     // Default node color (Cayenne orange)\n  prefix: '#002921',   // Color for prefixes\n  host: '#1E88E5',     // Blue for future host nodes\n  service: '#7CB342',  // Green for future service nodes\n  gpu: '#6D4C41',      // Brown for future GPU nodes\n  text: '#000',        // Black\n  edge: '#1a365d'      // Blue\n};\n\n// Register the cola layout\ncytoscape.use(cola);\n\n// Register the popper extension\ncytoscape.use(popper);\n\nconst Legend = () => (\n  <div className=\"graph-legend\">\n    <h3>Legend</h3>\n    <div className=\"legend-item\">\n      <span className=\"legend-color\" style={{ backgroundColor: COLORS.node }}></span>\n      <span>Nodes</span>\n    </div>\n    <div className=\"legend-item\">\n      <span className=\"legend-color\" style={{ backgroundColor: COLORS.prefix }}></span>\n      <span>Prefixes</span>\n    </div>\n    {/* Commented out for future use\n    <div className=\"legend-item\">\n      <span className=\"legend-color\" style={{ backgroundColor: COLORS.host }}></span>\n      <span>Hosts</span>\n    </div>\n    <div className=\"legend-item\">\n      <span className=\"legend-color\" style={{ backgroundColor: COLORS.service }}></span>\n      <span>Services</span>\n    </div>\n    <div className=\"legend-item\">\n      <span className=\"legend-color\" style={{ backgroundColor: COLORS.gpu }}></span>\n      <span>GPUs</span>\n    </div>\n    */}\n  </div>\n);\n\nconst NetworkGraph = ({ collection }) => {\n  const cyRef = useRef(null);\n  const [graphData, setGraphData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const tooltipsRef = useRef(new Set());\n\n  // Clean up tooltips when component unmounts\n  useEffect(() => {\n    return () => {\n      tooltipsRef.current.forEach(tooltip => tooltip.destroy());\n      tooltipsRef.current.clear();\n    };\n  }, []);\n\n  // Initialize tooltips after graph is rendered\n  const initializeTooltips = (cy) => {\n    // Remove any existing tooltips\n    tooltipsRef.current.forEach(tooltip => tooltip.destroy());\n    tooltipsRef.current.clear();\n\n    cy.nodes().forEach(node => {\n      const ref = node.popperRef();\n      const tip = tippy(ref, {\n        content: () => {\n          const content = document.createElement('div');\n          content.classList.add('tooltip-content');\n          \n          const type = node.data('type');\n          const label = node.data('label');\n          \n          content.innerHTML = `\n            <div class=\"tooltip-header\">${type}</div>\n            <div class=\"tooltip-body\">\n              <div>ID: ${label}</div>\n              ${node.data('info') ? `<div>${node.data('info')}</div>` : ''}\n            </div>\n          `;\n          \n          return content;\n        },\n        trigger: 'manual',\n        placement: 'top',\n        arrow: true,\n        interactive: true\n      });\n      \n      tooltipsRef.current.add(tip);\n\n      node.on('mouseover', () => tip.show());\n      node.on('mouseout', () => tip.hide());\n    });\n  };\n\n  useEffect(() => {\n    const loadGraphData = async () => {\n      if (!collection) return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        console.log('Fetching from:', `${apiUrl}/api/v1/collections/${collection}/edges`);\n        const response = await fetch(`${apiUrl}/api/v1/collections/${collection}/edges`);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Received data:', data);\n        \n        const elements = transformDataToCytoscape(data);\n        setGraphData(elements);\n      } catch (err) {\n        console.error('Detailed error:', err);\n        setError(`Failed to load graph data: ${err.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadGraphData();\n  }, [collection]);\n\n  const transformDataToCytoscape = (data) => {\n    const elements = {\n      nodes: new Set(),\n      edges: new Set()\n    };\n\n    if (!data) return [];\n    const edgesData = Array.isArray(data) ? data : data.edges || data.data || [];\n\n    const getEdgeId = (from, to) => {\n      const nodes = [from, to].sort();\n      return `${nodes[0]}-${nodes[1]}`;\n    };\n\n    edgesData.forEach(item => {\n      if (item._from && item._to) {\n        // Add nodes with any additional info from the API\n        elements.nodes.add({\n          data: {\n            id: item._from,\n            label: item._from.split('/')[1],\n            type: item._from.split('/')[0],\n            info: item.from_info || '' // Additional info if provided by API\n          }\n        });\n\n        elements.nodes.add({\n          data: {\n            id: item._to,\n            label: item._to.split('/')[1],\n            type: item._to.split('/')[0],\n            info: item.to_info || '' // Additional info if provided by API\n          }\n        });\n\n        const edgeId = getEdgeId(item._from, item._to);\n        elements.edges.add({\n          data: {\n            id: edgeId,\n            source: item._from,\n            target: item._to,\n            info: item.edge_info || '' // Additional edge info if provided\n          }\n        });\n      }\n    });\n\n    return [...Array.from(elements.nodes), ...Array.from(elements.edges)];\n  };\n\n  const layout = {\n    name: 'cola',\n    animate: true,\n    refresh: 1,\n    maxSimulationTime: 3000,\n    nodeSpacing: 100,\n    edgeLength: 200,\n    randomize: true,\n    infinite: true\n  };\n\n  const stylesheet = [\n    {\n      selector: 'node',\n      style: {\n        'background-color': (ele) => {\n          const nodeType = ele.data('type');\n          return nodeType.includes('prefix') ? COLORS.prefix : COLORS.node;\n        },\n        'label': 'data(label)',\n        'width': 30,\n        'height': 30,\n        'color': COLORS.text,\n        'text-outline-width': 2,\n        'text-outline-color': '#fff',\n        'font-family': 'Consolas',\n        'font-size': '10px',\n        'text-wrap': 'wrap',\n        'text-max-width': '100px'\n      }\n    },\n    {\n      selector: 'edge',\n      style: {\n        'width': 1.5,\n        'line-color': COLORS.edge,\n        'curve-style': 'bezier',\n        'target-arrow-color': COLORS.edge,\n        'target-arrow-shape': 'triangle',\n        'arrow-scale': 0.8\n      }\n    }\n  ];\n\n  if (isLoading) {\n    return <div style={{ padding: '20px', fontFamily: 'Consolas' }}>Loading graph data...</div>;\n  }\n\n  if (error) {\n    return <div style={{ padding: '20px', color: 'red', fontFamily: 'Consolas' }}>{error}</div>;\n  }\n\n  if (!graphData) {\n    return <div style={{ padding: '20px', fontFamily: 'Consolas' }}>Select a graph to visualize</div>;\n  }\n\n  return (\n    <div className=\"network-graph-container\">\n      <Legend />\n      <div className=\"graph-area\">\n        <CytoscapeComponent\n          elements={graphData}\n          layout={layout}\n          stylesheet={stylesheet}\n          cy={(cy) => {\n            cyRef.current = cy;\n            initializeTooltips(cy);\n          }}\n          style={{ width: '100%', height: '100%' }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default NetworkGraph; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}