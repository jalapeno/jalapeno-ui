{"ast":null,"code":"var _jsxFileName = \"/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/src/components/NetworkGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport { apiUrl } from '../config';\nimport '../styles/NetworkGraph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = {\n  igp_node: '#CC4A04',\n  // Cayenne orange for IGP nodes\n  bgp_node: '#1E88E5',\n  // Blue for BGP nodes\n  prefix: '#002921',\n  // Dark green for all prefix types\n  text: '#000',\n  // Black text\n  edge: '#1a365d' // Blue edges\n};\ncytoscape.use(cola);\nconst NetworkGraph = ({\n  collection\n}) => {\n  _s();\n  const cyRef = useRef(null);\n  const [graphData, setGraphData] = useState(null);\n  const isPrefix = type => {\n    return type === 'ls_prefix' || type === 'bgp_prefix';\n  };\n\n  // Legend component definition\n  const Legend = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-legend\",\n    style: {\n      position: 'absolute',\n      top: '10px',\n      right: '10px',\n      background: 'white',\n      padding: '10px',\n      borderRadius: '5px',\n      boxShadow: '0 0 10px rgba(0,0,0,0.1)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        margin: '0 0 10px 0'\n      },\n      children: \"Legend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '5px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            width: '20px',\n            height: '20px',\n            backgroundColor: COLORS.igp_node,\n            display: 'inline-block',\n            borderRadius: '3px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"IGP Nodes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            width: '20px',\n            height: '20px',\n            backgroundColor: COLORS.bgp_node,\n            display: 'inline-block',\n            borderRadius: '3px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"BGP Nodes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            width: '20px',\n            height: '20px',\n            backgroundColor: COLORS.prefix,\n            display: 'inline-block',\n            borderRadius: '3px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Prefixes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n  const transformDataToCytoscape = data => {\n    console.log('Starting data transformation with:', data);\n    if (!(data !== null && data !== void 0 && data.edges) || !(data !== null && data !== void 0 && data.vertices)) {\n      console.warn('Missing edges or vertices in data');\n      return [];\n    }\n    const elements = [];\n\n    // Add vertices as nodes\n    Object.entries(data.vertices).forEach(([id, vertex]) => {\n      elements.push({\n        group: 'nodes',\n        data: {\n          id: id,\n          label: vertex.name || id,\n          type: id.split('/')[0],\n          vertexData: vertex\n        }\n      });\n    });\n\n    // Add edges\n    const processedEdges = new Set();\n    data.edges.forEach(edge => {\n      if (edge._from && edge._to) {\n        const edgeId = `${edge._from}-${edge._to}`;\n        if (!processedEdges.has(edgeId)) {\n          processedEdges.add(edgeId);\n          elements.push({\n            group: 'edges',\n            data: {\n              id: edgeId,\n              source: edge._from,\n              target: edge._to\n            }\n          });\n        }\n      }\n    });\n    console.log('Transformed elements:', {\n      total: elements.length,\n      nodes: elements.filter(e => e.group === 'nodes').length,\n      edges: elements.filter(e => e.group === 'edges').length\n    });\n    return elements;\n  };\n  useEffect(() => {\n    console.log('Collection received:', {\n      collection,\n      type: typeof collection,\n      keys: collection ? Object.keys(collection) : 'none'\n    });\n\n    // If collection is just the name, we need to fetch the data\n    if (typeof collection === 'string') {\n      const baseUrl = process.env.REACT_APP_API_URL || '';\n      const endpoint = `${baseUrl}/api/v1/collections/${collection}/topology`;\n      console.log('Fetching topology from:', endpoint);\n      fetch(endpoint).then(response => response.json()).then(data => {\n        console.log('Fetched topology data:', data);\n        const elements = transformDataToCytoscape(data);\n        setGraphData(elements);\n      }).catch(error => console.error('Error fetching topology data:', error));\n    }\n    // If collection already has the data\n    else if (collection !== null && collection !== void 0 && collection.data) {\n      const elements = transformDataToCytoscape(collection.data);\n      setGraphData(elements);\n    }\n  }, [collection]);\n  useEffect(() => {\n    console.log('Graph data changed:', graphData);\n    if (cyRef.current && graphData) {\n      const cy = cyRef.current;\n      console.log('Applying layout to', cy.elements().length, 'elements');\n\n      // Run layouts sequentially\n      const nonPrefixNodes = cy.nodes().filter(node => !isPrefix(node.data('type')));\n      const prefixNodes = cy.nodes().filter(node => isPrefix(node.data('type')));\n      console.log('Node counts:', {\n        total: cy.nodes().length,\n        nonPrefix: nonPrefixNodes.length,\n        prefix: prefixNodes.length\n      });\n\n      // Position non-prefix nodes in a circle\n      nonPrefixNodes.layout({\n        name: 'circle',\n        animate: false,\n        padding: 50,\n        radius: 150,\n        startAngle: 3 / 2 * Math.PI,\n        sweep: 2 * Math.PI,\n        clockwise: true\n      }).run();\n\n      // Position prefix nodes in a line\n      const width = cy.width();\n      const height = cy.height();\n      prefixNodes.forEach((node, index) => {\n        const totalPrefixes = prefixNodes.length;\n        const prefixWidth = width * 0.8;\n        const startX = width * 0.1;\n        const x = startX + prefixWidth * index / (totalPrefixes - 1 || 1);\n        node.position({\n          x: x,\n          y: height * 0.8\n        });\n      });\n\n      // Fit the viewport\n      cy.fit(undefined, 50);\n    }\n  }, [graphData]);\n  const stylesheet = [{\n    selector: 'node',\n    style: {\n      'background-color': ele => {\n        const type = ele.data('type');\n        if (isPrefix(type)) return COLORS.prefix;\n        return COLORS[type] || COLORS.igp_node;\n      },\n      'label': 'data(label)',\n      'width': 30,\n      'height': 30,\n      'color': COLORS.text,\n      'text-outline-width': 2,\n      'text-outline-color': '#fff',\n      'font-family': 'Consolas',\n      'font-size': '10px',\n      'text-wrap': 'wrap',\n      'text-max-width': '100px'\n    }\n  }, {\n    selector: 'edge',\n    style: {\n      'width': 1.5,\n      'line-color': COLORS.edge,\n      'curve-style': 'bezier',\n      'target-arrow-color': COLORS.edge,\n      'target-arrow-shape': 'triangle',\n      'arrow-scale': 0.8\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"network-graph\",\n    style: {\n      width: '100%',\n      height: '800px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(CytoscapeComponent, {\n      cy: cy => {\n        console.log('Cytoscape initialized');\n        cyRef.current = cy;\n      },\n      elements: graphData || [],\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      stylesheet: stylesheet,\n      userZoomingEnabled: true,\n      userPanningEnabled: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_s(NetworkGraph, \"E/8/QMImdjSaPUsH4myrgcssuf4=\");\n_c = NetworkGraph;\nexport default NetworkGraph;\nvar _c;\n$RefreshReg$(_c, \"NetworkGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","CytoscapeComponent","cytoscape","cola","apiUrl","jsxDEV","_jsxDEV","COLORS","igp_node","bgp_node","prefix","text","edge","use","NetworkGraph","collection","_s","cyRef","graphData","setGraphData","isPrefix","type","Legend","className","style","position","top","right","background","padding","borderRadius","boxShadow","children","margin","fileName","_jsxFileName","lineNumber","columnNumber","display","flexDirection","gap","alignItems","width","height","backgroundColor","transformDataToCytoscape","data","console","log","edges","vertices","warn","elements","Object","entries","forEach","id","vertex","push","group","label","name","split","vertexData","processedEdges","Set","_from","_to","edgeId","has","add","source","target","total","length","nodes","filter","e","keys","baseUrl","process","env","REACT_APP_API_URL","endpoint","fetch","then","response","json","catch","error","current","cy","nonPrefixNodes","node","prefixNodes","nonPrefix","layout","animate","radius","startAngle","Math","PI","sweep","clockwise","run","index","totalPrefixes","prefixWidth","startX","x","y","fit","undefined","stylesheet","selector","ele","userZoomingEnabled","userPanningEnabled","_c","$RefreshReg$"],"sources":["/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/src/components/NetworkGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport { apiUrl } from '../config';\nimport '../styles/NetworkGraph.css';\n\nconst COLORS = {\n  igp_node: '#CC4A04',    // Cayenne orange for IGP nodes\n  bgp_node: '#1E88E5',    // Blue for BGP nodes\n  prefix: '#002921',      // Dark green for all prefix types\n  text: '#000',           // Black text\n  edge: '#1a365d'         // Blue edges\n};\n\ncytoscape.use(cola);\n\nconst NetworkGraph = ({ collection }) => {\n  const cyRef = useRef(null);\n  const [graphData, setGraphData] = useState(null);\n\n  const isPrefix = (type) => {\n    return type === 'ls_prefix' || type === 'bgp_prefix';\n  };\n\n  // Legend component definition\n  const Legend = () => (\n    <div className=\"graph-legend\" style={{\n      position: 'absolute',\n      top: '10px',\n      right: '10px',\n      background: 'white',\n      padding: '10px',\n      borderRadius: '5px',\n      boxShadow: '0 0 10px rgba(0,0,0,0.1)'\n    }}>\n      <h3 style={{ margin: '0 0 10px 0' }}>Legend</h3>\n      <div style={{ display: 'flex', flexDirection: 'column', gap: '5px' }}>\n        <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>\n          <span style={{ \n            width: '20px', \n            height: '20px', \n            backgroundColor: COLORS.igp_node,\n            display: 'inline-block',\n            borderRadius: '3px'\n          }}></span>\n          <span>IGP Nodes</span>\n        </div>\n        <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>\n          <span style={{ \n            width: '20px', \n            height: '20px', \n            backgroundColor: COLORS.bgp_node,\n            display: 'inline-block',\n            borderRadius: '3px'\n          }}></span>\n          <span>BGP Nodes</span>\n        </div>\n        <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>\n          <span style={{ \n            width: '20px', \n            height: '20px', \n            backgroundColor: COLORS.prefix,\n            display: 'inline-block',\n            borderRadius: '3px'\n          }}></span>\n          <span>Prefixes</span>\n        </div>\n      </div>\n    </div>\n  );\n\n  const transformDataToCytoscape = (data) => {\n    console.log('Starting data transformation with:', data);\n    \n    if (!data?.edges || !data?.vertices) {\n      console.warn('Missing edges or vertices in data');\n      return [];\n    }\n\n    const elements = [];\n\n    // Add vertices as nodes\n    Object.entries(data.vertices).forEach(([id, vertex]) => {\n      elements.push({\n        group: 'nodes',\n        data: {\n          id: id,\n          label: vertex.name || id,\n          type: id.split('/')[0],\n          vertexData: vertex\n        }\n      });\n    });\n\n    // Add edges\n    const processedEdges = new Set();\n    data.edges.forEach(edge => {\n      if (edge._from && edge._to) {\n        const edgeId = `${edge._from}-${edge._to}`;\n        if (!processedEdges.has(edgeId)) {\n          processedEdges.add(edgeId);\n          elements.push({\n            group: 'edges',\n            data: {\n              id: edgeId,\n              source: edge._from,\n              target: edge._to\n            }\n          });\n        }\n      }\n    });\n\n    console.log('Transformed elements:', {\n      total: elements.length,\n      nodes: elements.filter(e => e.group === 'nodes').length,\n      edges: elements.filter(e => e.group === 'edges').length\n    });\n\n    return elements;\n  };\n\n  useEffect(() => {\n    console.log('Collection received:', {\n      collection,\n      type: typeof collection,\n      keys: collection ? Object.keys(collection) : 'none'\n    });\n\n    // If collection is just the name, we need to fetch the data\n    if (typeof collection === 'string') {\n      const baseUrl = process.env.REACT_APP_API_URL || '';\n      const endpoint = `${baseUrl}/api/v1/collections/${collection}/topology`;\n      \n      console.log('Fetching topology from:', endpoint);\n      \n      fetch(endpoint)\n        .then(response => response.json())\n        .then(data => {\n          console.log('Fetched topology data:', data);\n          const elements = transformDataToCytoscape(data);\n          setGraphData(elements);\n        })\n        .catch(error => console.error('Error fetching topology data:', error));\n    } \n    // If collection already has the data\n    else if (collection?.data) {\n      const elements = transformDataToCytoscape(collection.data);\n      setGraphData(elements);\n    }\n  }, [collection]);\n\n  useEffect(() => {\n    console.log('Graph data changed:', graphData);\n    if (cyRef.current && graphData) {\n      const cy = cyRef.current;\n      console.log('Applying layout to', cy.elements().length, 'elements');\n      \n      // Run layouts sequentially\n      const nonPrefixNodes = cy.nodes().filter(node => !isPrefix(node.data('type')));\n      const prefixNodes = cy.nodes().filter(node => isPrefix(node.data('type')));\n      \n      console.log('Node counts:', {\n        total: cy.nodes().length,\n        nonPrefix: nonPrefixNodes.length,\n        prefix: prefixNodes.length\n      });\n\n      // Position non-prefix nodes in a circle\n      nonPrefixNodes.layout({\n        name: 'circle',\n        animate: false,\n        padding: 50,\n        radius: 150,\n        startAngle: 3/2 * Math.PI,\n        sweep: 2 * Math.PI,\n        clockwise: true\n      }).run();\n\n      // Position prefix nodes in a line\n      const width = cy.width();\n      const height = cy.height();\n      \n      prefixNodes.forEach((node, index) => {\n        const totalPrefixes = prefixNodes.length;\n        const prefixWidth = width * 0.8;\n        const startX = width * 0.1;\n        const x = startX + (prefixWidth * index / (totalPrefixes - 1 || 1));\n        \n        node.position({\n          x: x,\n          y: height * 0.8\n        });\n      });\n\n      // Fit the viewport\n      cy.fit(undefined, 50);\n    }\n  }, [graphData]);\n\n  const stylesheet = [\n    {\n      selector: 'node',\n      style: {\n        'background-color': (ele) => {\n          const type = ele.data('type');\n          if (isPrefix(type)) return COLORS.prefix;\n          return COLORS[type] || COLORS.igp_node;\n        },\n        'label': 'data(label)',\n        'width': 30,\n        'height': 30,\n        'color': COLORS.text,\n        'text-outline-width': 2,\n        'text-outline-color': '#fff',\n        'font-family': 'Consolas',\n        'font-size': '10px',\n        'text-wrap': 'wrap',\n        'text-max-width': '100px'\n      }\n    },\n    {\n      selector: 'edge',\n      style: {\n        'width': 1.5,\n        'line-color': COLORS.edge,\n        'curve-style': 'bezier',\n        'target-arrow-color': COLORS.edge,\n        'target-arrow-shape': 'triangle',\n        'arrow-scale': 0.8\n      }\n    }\n  ];\n\n  return (\n    <div className=\"network-graph\" style={{ width: '100%', height: '800px', position: 'relative' }}>\n      <CytoscapeComponent\n        cy={(cy) => { \n          console.log('Cytoscape initialized');\n          cyRef.current = cy;\n        }}\n        elements={graphData || []}\n        style={{ width: '100%', height: '100%' }}\n        stylesheet={stylesheet}\n        userZoomingEnabled={true}\n        userPanningEnabled={true}\n      />\n      <Legend />\n    </div>\n  );\n};\n\nexport default NetworkGraph; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}