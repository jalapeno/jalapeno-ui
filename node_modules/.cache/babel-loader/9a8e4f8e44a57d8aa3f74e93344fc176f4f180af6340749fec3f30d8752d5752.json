{"ast":null,"code":"var _jsxFileName = \"/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/src/components/NetworkGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport { apiUrl } from '../config';\nimport '../styles/NetworkGraph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = {\n  node: '#CC4A04',\n  // Default node color (Cayenne orange)\n  prefix: '#002921',\n  // Color for prefixes\n  host: '#1E88E5',\n  // Blue for future host nodes\n  service: '#7CB342',\n  // Green for future service nodes\n  gpu: '#6D4C41',\n  // Brown for future GPU nodes\n  text: '#000',\n  // Black\n  edge: '#1a365d' // Blue\n};\ncytoscape.use(cola);\nconst Legend = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"graph-legend\",\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"Legend\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"legend-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"legend-color\",\n      style: {\n        backgroundColor: COLORS.node\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Nodes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"legend-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"legend-color\",\n      style: {\n        backgroundColor: COLORS.prefix\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Prefixes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 21,\n  columnNumber: 3\n}, this);\n_c = Legend;\nconst NetworkGraph = ({\n  collection\n}) => {\n  _s();\n  const cyRef = useRef(null);\n  const [graphData, setGraphData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadGraphData = async () => {\n      if (!collection) return;\n      setIsLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(`${apiUrl}/api/v1/collections/${collection}/edges`);\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        const data = await response.json();\n        const elements = transformDataToCytoscape(data);\n        setGraphData(elements);\n      } catch (err) {\n        console.error('Detailed error:', err);\n        setError(`Failed to load graph data: ${err.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadGraphData();\n  }, [collection]);\n\n  // Setup hover events after the graph is rendered\n  useEffect(() => {\n    if (cyRef.current) {\n      const cy = cyRef.current;\n\n      // Remove any existing event listeners\n      cy.nodes().unbind('mouseover mouseout');\n\n      // Add hover events\n      cy.nodes().bind('mouseover', event => {\n        const node = event.target;\n        const type = node.data('type');\n        const label = node.data('label');\n\n        // Create and position the tooltip div\n        let tooltip = document.getElementById('cy-tooltip');\n        if (!tooltip) {\n          tooltip = document.createElement('div');\n          tooltip.setAttribute('id', 'cy-tooltip');\n          document.body.appendChild(tooltip);\n        }\n        tooltip.innerHTML = `\n          <div class=\"tooltip-header\">${type}</div>\n          <div class=\"tooltip-body\">\n            <div>ID: ${label}</div>\n          </div>\n        `;\n        const renderedPosition = node.renderedPosition();\n        const zoom = cy.zoom();\n        tooltip.style.display = 'block';\n        tooltip.style.left = `${renderedPosition.x}px`;\n        tooltip.style.top = `${renderedPosition.y - 70}px`; // Offset above the node\n      });\n      cy.nodes().bind('mouseout', () => {\n        const tooltip = document.getElementById('cy-tooltip');\n        if (tooltip) {\n          tooltip.style.display = 'none';\n        }\n      });\n    }\n  }, [graphData]);\n  const transformDataToCytoscape = data => {\n    const elements = {\n      nodes: new Set(),\n      edges: new Set()\n    };\n    if (!data) return [];\n    const edgesData = Array.isArray(data) ? data : data.edges || data.data || [];\n    const getEdgeId = (from, to) => {\n      const nodes = [from, to].sort();\n      return `${nodes[0]}-${nodes[1]}`;\n    };\n    edgesData.forEach(item => {\n      if (item._from && item._to) {\n        // Add nodes with any additional info from the API\n        elements.nodes.add({\n          data: {\n            id: item._from,\n            label: item._from.split('/')[1],\n            type: item._from.split('/')[0],\n            info: item.from_info || '' // Additional info if provided by API\n          }\n        });\n        elements.nodes.add({\n          data: {\n            id: item._to,\n            label: item._to.split('/')[1],\n            type: item._to.split('/')[0],\n            info: item.to_info || '' // Additional info if provided by API\n          }\n        });\n        const edgeId = getEdgeId(item._from, item._to);\n        elements.edges.add({\n          data: {\n            id: edgeId,\n            source: item._from,\n            target: item._to,\n            info: item.edge_info || '' // Additional edge info if provided\n          }\n        });\n      }\n    });\n    return [...Array.from(elements.nodes), ...Array.from(elements.edges)];\n  };\n  const layout = {\n    name: 'cola',\n    animate: true,\n    refresh: 1,\n    maxSimulationTime: 3000,\n    nodeSpacing: 100,\n    edgeLength: 200,\n    randomize: true,\n    infinite: true\n  };\n  const stylesheet = [{\n    selector: 'node',\n    style: {\n      'background-color': ele => {\n        const nodeType = ele.data('type');\n        return nodeType.includes('prefix') ? COLORS.prefix : COLORS.node;\n      },\n      'label': 'data(label)',\n      'width': 30,\n      'height': 30,\n      'color': COLORS.text,\n      'text-outline-width': 2,\n      'text-outline-color': '#fff',\n      'font-family': 'Consolas',\n      'font-size': '10px',\n      'text-wrap': 'wrap',\n      'text-max-width': '100px'\n    }\n  }, {\n    selector: 'edge',\n    style: {\n      'width': 1.5,\n      'line-color': COLORS.edge,\n      'curve-style': 'bezier',\n      'target-arrow-color': COLORS.edge,\n      'target-arrow-shape': 'triangle',\n      'arrow-scale': 0.8\n    }\n  }];\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        fontFamily: 'Consolas'\n      },\n      children: \"Loading graph data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        color: 'red',\n        fontFamily: 'Consolas'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 12\n    }, this);\n  }\n  if (!graphData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        fontFamily: 'Consolas'\n      },\n      children: \"Select a graph to visualize\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"network-graph-container\",\n    children: [/*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-area\",\n      children: /*#__PURE__*/_jsxDEV(CytoscapeComponent, {\n        elements: graphData,\n        layout: layout,\n        stylesheet: stylesheet,\n        cy: cy => {\n          cyRef.current = cy;\n        },\n        style: {\n          width: '100%',\n          height: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n};\n_s(NetworkGraph, \"X5b3wkybgyjSLBG4fbUsFsleN3s=\");\n_c2 = NetworkGraph;\nexport default NetworkGraph;\nvar _c, _c2;\n$RefreshReg$(_c, \"Legend\");\n$RefreshReg$(_c2, \"NetworkGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","CytoscapeComponent","cytoscape","cola","apiUrl","jsxDEV","_jsxDEV","COLORS","node","prefix","host","service","gpu","text","edge","use","Legend","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","_c","NetworkGraph","collection","_s","cyRef","graphData","setGraphData","isLoading","setIsLoading","error","setError","loadGraphData","response","fetch","ok","Error","status","data","json","elements","transformDataToCytoscape","err","console","message","current","cy","nodes","unbind","bind","event","target","type","label","tooltip","document","getElementById","createElement","setAttribute","body","appendChild","innerHTML","renderedPosition","zoom","display","left","x","top","y","Set","edges","edgesData","Array","isArray","getEdgeId","from","to","sort","forEach","item","_from","_to","add","id","split","info","from_info","to_info","edgeId","source","edge_info","layout","name","animate","refresh","maxSimulationTime","nodeSpacing","edgeLength","randomize","infinite","stylesheet","selector","ele","nodeType","includes","padding","fontFamily","color","width","height","_c2","$RefreshReg$"],"sources":["/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/src/components/NetworkGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport { apiUrl } from '../config';\nimport '../styles/NetworkGraph.css';\n\nconst COLORS = {\n  node: '#CC4A04',     // Default node color (Cayenne orange)\n  prefix: '#002921',   // Color for prefixes\n  host: '#1E88E5',     // Blue for future host nodes\n  service: '#7CB342',  // Green for future service nodes\n  gpu: '#6D4C41',      // Brown for future GPU nodes\n  text: '#000',        // Black\n  edge: '#1a365d'      // Blue\n};\n\ncytoscape.use(cola);\n\nconst Legend = () => (\n  <div className=\"graph-legend\">\n    <h3>Legend</h3>\n    <div className=\"legend-item\">\n      <span className=\"legend-color\" style={{ backgroundColor: COLORS.node }}></span>\n      <span>Nodes</span>\n    </div>\n    <div className=\"legend-item\">\n      <span className=\"legend-color\" style={{ backgroundColor: COLORS.prefix }}></span>\n      <span>Prefixes</span>\n    </div>\n  </div>\n);\n\nconst NetworkGraph = ({ collection }) => {\n  const cyRef = useRef(null);\n  const [graphData, setGraphData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadGraphData = async () => {\n      if (!collection) return;\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const response = await fetch(`${apiUrl}/api/v1/collections/${collection}/edges`);\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        const data = await response.json();\n        const elements = transformDataToCytoscape(data);\n        setGraphData(elements);\n      } catch (err) {\n        console.error('Detailed error:', err);\n        setError(`Failed to load graph data: ${err.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadGraphData();\n  }, [collection]);\n\n  // Setup hover events after the graph is rendered\n  useEffect(() => {\n    if (cyRef.current) {\n      const cy = cyRef.current;\n      \n      // Remove any existing event listeners\n      cy.nodes().unbind('mouseover mouseout');\n      \n      // Add hover events\n      cy.nodes().bind('mouseover', (event) => {\n        const node = event.target;\n        const type = node.data('type');\n        const label = node.data('label');\n        \n        // Create and position the tooltip div\n        let tooltip = document.getElementById('cy-tooltip');\n        if (!tooltip) {\n          tooltip = document.createElement('div');\n          tooltip.setAttribute('id', 'cy-tooltip');\n          document.body.appendChild(tooltip);\n        }\n        \n        tooltip.innerHTML = `\n          <div class=\"tooltip-header\">${type}</div>\n          <div class=\"tooltip-body\">\n            <div>ID: ${label}</div>\n          </div>\n        `;\n        \n        const renderedPosition = node.renderedPosition();\n        const zoom = cy.zoom();\n        \n        tooltip.style.display = 'block';\n        tooltip.style.left = `${renderedPosition.x}px`;\n        tooltip.style.top = `${renderedPosition.y - 70}px`; // Offset above the node\n      });\n      \n      cy.nodes().bind('mouseout', () => {\n        const tooltip = document.getElementById('cy-tooltip');\n        if (tooltip) {\n          tooltip.style.display = 'none';\n        }\n      });\n    }\n  }, [graphData]);\n\n  const transformDataToCytoscape = (data) => {\n    const elements = {\n      nodes: new Set(),\n      edges: new Set()\n    };\n\n    if (!data) return [];\n    const edgesData = Array.isArray(data) ? data : data.edges || data.data || [];\n\n    const getEdgeId = (from, to) => {\n      const nodes = [from, to].sort();\n      return `${nodes[0]}-${nodes[1]}`;\n    };\n\n    edgesData.forEach(item => {\n      if (item._from && item._to) {\n        // Add nodes with any additional info from the API\n        elements.nodes.add({\n          data: {\n            id: item._from,\n            label: item._from.split('/')[1],\n            type: item._from.split('/')[0],\n            info: item.from_info || '' // Additional info if provided by API\n          }\n        });\n\n        elements.nodes.add({\n          data: {\n            id: item._to,\n            label: item._to.split('/')[1],\n            type: item._to.split('/')[0],\n            info: item.to_info || '' // Additional info if provided by API\n          }\n        });\n\n        const edgeId = getEdgeId(item._from, item._to);\n        elements.edges.add({\n          data: {\n            id: edgeId,\n            source: item._from,\n            target: item._to,\n            info: item.edge_info || '' // Additional edge info if provided\n          }\n        });\n      }\n    });\n\n    return [...Array.from(elements.nodes), ...Array.from(elements.edges)];\n  };\n\n  const layout = {\n    name: 'cola',\n    animate: true,\n    refresh: 1,\n    maxSimulationTime: 3000,\n    nodeSpacing: 100,\n    edgeLength: 200,\n    randomize: true,\n    infinite: true\n  };\n\n  const stylesheet = [\n    {\n      selector: 'node',\n      style: {\n        'background-color': (ele) => {\n          const nodeType = ele.data('type');\n          return nodeType.includes('prefix') ? COLORS.prefix : COLORS.node;\n        },\n        'label': 'data(label)',\n        'width': 30,\n        'height': 30,\n        'color': COLORS.text,\n        'text-outline-width': 2,\n        'text-outline-color': '#fff',\n        'font-family': 'Consolas',\n        'font-size': '10px',\n        'text-wrap': 'wrap',\n        'text-max-width': '100px'\n      }\n    },\n    {\n      selector: 'edge',\n      style: {\n        'width': 1.5,\n        'line-color': COLORS.edge,\n        'curve-style': 'bezier',\n        'target-arrow-color': COLORS.edge,\n        'target-arrow-shape': 'triangle',\n        'arrow-scale': 0.8\n      }\n    }\n  ];\n\n  if (isLoading) {\n    return <div style={{ padding: '20px', fontFamily: 'Consolas' }}>Loading graph data...</div>;\n  }\n\n  if (error) {\n    return <div style={{ padding: '20px', color: 'red', fontFamily: 'Consolas' }}>{error}</div>;\n  }\n\n  if (!graphData) {\n    return <div style={{ padding: '20px', fontFamily: 'Consolas' }}>Select a graph to visualize</div>;\n  }\n\n  return (\n    <div className=\"network-graph-container\">\n      <Legend />\n      <div className=\"graph-area\">\n        <CytoscapeComponent\n          elements={graphData}\n          layout={layout}\n          stylesheet={stylesheet}\n          cy={(cy) => { cyRef.current = cy; }}\n          style={{ width: '100%', height: '100%' }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default NetworkGraph; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}