{"ast":null,"code":"var _jsxFileName = \"/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/src/components/NetworkGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport { apiUrl } from '../config';\nimport '../styles/NetworkGraph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = {\n  node: '#CC4A04',\n  // Default node color (Cayenne orange)\n  prefix: '#002921',\n  // Color for prefixes\n  host: '#1E88E5',\n  // Blue for future host nodes\n  service: '#7CB342',\n  // Green for future service nodes\n  gpu: '#6D4C41',\n  // Brown for future GPU nodes\n  text: '#000',\n  // Black\n  edge: '#1a365d' // Blue\n};\ncytoscape.use(cola);\nconst Legend = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"graph-legend\",\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"Legend\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"legend-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"legend-color\",\n      style: {\n        backgroundColor: COLORS.node\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Nodes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"legend-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"legend-color\",\n      style: {\n        backgroundColor: COLORS.prefix\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Prefixes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 21,\n  columnNumber: 3\n}, this);\n_c = Legend;\nconst NetworkGraph = ({\n  collection\n}) => {\n  _s();\n  const cyRef = useRef(null);\n  const [graphData, setGraphData] = useState(null);\n  const [verticesData, setVerticesData] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadGraphData = async () => {\n      if (!collection) return;\n      setIsLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(`${apiUrl}/api/v1/collections/${collection}/topology`);\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        const data = await response.json();\n        console.log('Topology data:', data); // Debug log\n        const elements = transformDataToCytoscape(data);\n        setGraphData(elements);\n      } catch (err) {\n        console.error('Detailed error:', err);\n        setError(`Failed to load graph data: ${err.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadGraphData();\n  }, [collection]);\n  const transformDataToCytoscape = data => {\n    const elements = {\n      nodes: new Set(),\n      edges: new Set()\n    };\n    if (!(data !== null && data !== void 0 && data.edges) || !(data !== null && data !== void 0 && data.vertices)) {\n      console.warn('Missing edges or vertices in data');\n      return [];\n    }\n\n    // Store vertices data for tooltips\n    setVerticesData(data.vertices);\n\n    // Process edges\n    Object.entries(data.edges).forEach(([_, edge]) => {\n      if (edge._from && edge._to) {\n        const fromVertex = data.vertices[edge._from] || {};\n        const toVertex = data.vertices[edge._to] || {};\n\n        // Add nodes with their vertex data\n        elements.nodes.add({\n          data: {\n            id: edge._from,\n            label: fromVertex.name || edge._from.split('/')[1],\n            type: edge._from.split('/')[0],\n            vertexData: fromVertex\n          }\n        });\n        elements.nodes.add({\n          data: {\n            id: edge._to,\n            label: toVertex.name || edge._to.split('/')[1],\n            type: edge._to.split('/')[0],\n            vertexData: toVertex\n          }\n        });\n\n        // Add edge (only one direction)\n        const edgeId = `${edge._from}-${edge._to}`;\n        elements.edges.add({\n          data: {\n            id: edgeId,\n            source: edge._from,\n            target: edge._to\n          }\n        });\n      }\n    });\n    return [...Array.from(elements.nodes), ...Array.from(elements.edges)];\n  };\n  const getTooltipContent = node => {\n    const vertexData = node.data('vertexData') || {};\n    const type = node.data('type');\n    let content = `<div class=\"tooltip-header\">${type}</div><div class=\"tooltip-body\">`;\n\n    // Add common fields if they exist\n    if (vertexData.name) {\n      content += `<div>Name: ${vertexData.name}</div>`;\n    }\n    if (vertexData.asn) {\n      content += `<div>ASN: ${vertexData.asn}</div>`;\n    }\n\n    // Add type-specific fields\n    switch (type) {\n      case 'ls_node_extended':\n        if (vertexData.protocol) {\n          content += `<div>Protocol: ${vertexData.protocol}</div>`;\n        }\n        if (vertexData.sids && vertexData.sids.length > 0) {\n          content += `<div>SIDs: ${vertexData.sids.join(', ')}</div>`;\n        }\n        break;\n      case 'ls_prefix':\n        if (vertexData.prefix) {\n          content += `<div>Prefix: ${vertexData.prefix}</div>`;\n        }\n        break;\n      case 'ebgp_peer_v6':\n        if (vertexData.peer_ip) {\n          content += `<div>Peer IP: ${vertexData.peer_ip}</div>`;\n        }\n        break;\n    }\n    content += '</div>';\n    return content;\n  };\n\n  // Setup hover events after the graph is rendered\n  useEffect(() => {\n    if (cyRef.current) {\n      const cy = cyRef.current;\n\n      // Remove any existing event listeners\n      cy.nodes().unbind('mouseover mouseout');\n\n      // Add hover events\n      cy.nodes().bind('mouseover', event => {\n        const node = event.target;\n        const type = node.data('type');\n        const label = node.data('label');\n\n        // Create and position the tooltip div\n        let tooltip = document.getElementById('cy-tooltip');\n        if (!tooltip) {\n          tooltip = document.createElement('div');\n          tooltip.setAttribute('id', 'cy-tooltip');\n          document.body.appendChild(tooltip);\n        }\n        tooltip.innerHTML = `\n          <div class=\"tooltip-header\">${type}</div>\n          <div class=\"tooltip-body\">\n            <div>ID: ${label}</div>\n          </div>\n        `;\n        const renderedPosition = node.renderedPosition();\n        const zoom = cy.zoom();\n        tooltip.style.display = 'block';\n        tooltip.style.left = `${renderedPosition.x}px`;\n        tooltip.style.top = `${renderedPosition.y - 70}px`; // Offset above the node\n      });\n      cy.nodes().bind('mouseout', () => {\n        const tooltip = document.getElementById('cy-tooltip');\n        if (tooltip) {\n          tooltip.style.display = 'none';\n        }\n      });\n    }\n  }, [graphData]);\n  const layout = {\n    name: 'cola',\n    animate: true,\n    refresh: 1,\n    maxSimulationTime: 3000,\n    nodeSpacing: 100,\n    edgeLength: 200,\n    randomize: true,\n    infinite: true\n  };\n  const stylesheet = [{\n    selector: 'node',\n    style: {\n      'background-color': ele => {\n        const nodeType = ele.data('type');\n        return nodeType.includes('prefix') ? COLORS.prefix : COLORS.node;\n      },\n      'label': 'data(label)',\n      'width': 30,\n      'height': 30,\n      'color': COLORS.text,\n      'text-outline-width': 2,\n      'text-outline-color': '#fff',\n      'font-family': 'Consolas',\n      'font-size': '10px',\n      'text-wrap': 'wrap',\n      'text-max-width': '100px'\n    }\n  }, {\n    selector: 'edge',\n    style: {\n      'width': 1.5,\n      'line-color': COLORS.edge,\n      'curve-style': 'bezier',\n      'target-arrow-color': COLORS.edge,\n      'target-arrow-shape': 'triangle',\n      'arrow-scale': 0.8\n    }\n  }];\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        fontFamily: 'Consolas'\n      },\n      children: \"Loading graph data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        color: 'red',\n        fontFamily: 'Consolas'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 12\n    }, this);\n  }\n  if (!graphData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        fontFamily: 'Consolas'\n      },\n      children: \"Select a graph to visualize\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"network-graph-container\",\n    children: [/*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-area\",\n      children: /*#__PURE__*/_jsxDEV(CytoscapeComponent, {\n        elements: graphData,\n        layout: layout,\n        stylesheet: stylesheet,\n        cy: cy => {\n          cyRef.current = cy;\n        },\n        style: {\n          width: '100%',\n          height: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n};\n_s(NetworkGraph, \"J1X/XVigm81B1vcAfDmgadcFJvk=\");\n_c2 = NetworkGraph;\nexport default NetworkGraph;\nvar _c, _c2;\n$RefreshReg$(_c, \"Legend\");\n$RefreshReg$(_c2, \"NetworkGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","CytoscapeComponent","cytoscape","cola","apiUrl","jsxDEV","_jsxDEV","COLORS","node","prefix","host","service","gpu","text","edge","use","Legend","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","_c","NetworkGraph","collection","_s","cyRef","graphData","setGraphData","verticesData","setVerticesData","isLoading","setIsLoading","error","setError","loadGraphData","response","fetch","ok","Error","status","data","json","console","log","elements","transformDataToCytoscape","err","message","nodes","Set","edges","vertices","warn","Object","entries","forEach","_","_from","_to","fromVertex","toVertex","add","id","label","name","split","type","vertexData","edgeId","source","target","Array","from","getTooltipContent","content","asn","protocol","sids","length","join","peer_ip","current","cy","unbind","bind","event","tooltip","document","getElementById","createElement","setAttribute","body","appendChild","innerHTML","renderedPosition","zoom","display","left","x","top","y","layout","animate","refresh","maxSimulationTime","nodeSpacing","edgeLength","randomize","infinite","stylesheet","selector","ele","nodeType","includes","padding","fontFamily","color","width","height","_c2","$RefreshReg$"],"sources":["/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/src/components/NetworkGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport { apiUrl } from '../config';\nimport '../styles/NetworkGraph.css';\n\nconst COLORS = {\n  node: '#CC4A04',     // Default node color (Cayenne orange)\n  prefix: '#002921',   // Color for prefixes\n  host: '#1E88E5',     // Blue for future host nodes\n  service: '#7CB342',  // Green for future service nodes\n  gpu: '#6D4C41',      // Brown for future GPU nodes\n  text: '#000',        // Black\n  edge: '#1a365d'      // Blue\n};\n\ncytoscape.use(cola);\n\nconst Legend = () => (\n  <div className=\"graph-legend\">\n    <h3>Legend</h3>\n    <div className=\"legend-item\">\n      <span className=\"legend-color\" style={{ backgroundColor: COLORS.node }}></span>\n      <span>Nodes</span>\n    </div>\n    <div className=\"legend-item\">\n      <span className=\"legend-color\" style={{ backgroundColor: COLORS.prefix }}></span>\n      <span>Prefixes</span>\n    </div>\n  </div>\n);\n\nconst NetworkGraph = ({ collection }) => {\n  const cyRef = useRef(null);\n  const [graphData, setGraphData] = useState(null);\n  const [verticesData, setVerticesData] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadGraphData = async () => {\n      if (!collection) return;\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const response = await fetch(`${apiUrl}/api/v1/collections/${collection}/topology`);\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        const data = await response.json();\n        console.log('Topology data:', data); // Debug log\n        const elements = transformDataToCytoscape(data);\n        setGraphData(elements);\n      } catch (err) {\n        console.error('Detailed error:', err);\n        setError(`Failed to load graph data: ${err.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadGraphData();\n  }, [collection]);\n\n  const transformDataToCytoscape = (data) => {\n    const elements = {\n      nodes: new Set(),\n      edges: new Set()\n    };\n\n    if (!data?.edges || !data?.vertices) {\n      console.warn('Missing edges or vertices in data');\n      return [];\n    }\n    \n    // Store vertices data for tooltips\n    setVerticesData(data.vertices);\n\n    // Process edges\n    Object.entries(data.edges).forEach(([_, edge]) => {\n      if (edge._from && edge._to) {\n        const fromVertex = data.vertices[edge._from] || {};\n        const toVertex = data.vertices[edge._to] || {};\n\n        // Add nodes with their vertex data\n        elements.nodes.add({\n          data: {\n            id: edge._from,\n            label: fromVertex.name || edge._from.split('/')[1],\n            type: edge._from.split('/')[0],\n            vertexData: fromVertex\n          }\n        });\n\n        elements.nodes.add({\n          data: {\n            id: edge._to,\n            label: toVertex.name || edge._to.split('/')[1],\n            type: edge._to.split('/')[0],\n            vertexData: toVertex\n          }\n        });\n\n        // Add edge (only one direction)\n        const edgeId = `${edge._from}-${edge._to}`;\n        elements.edges.add({\n          data: {\n            id: edgeId,\n            source: edge._from,\n            target: edge._to\n          }\n        });\n      }\n    });\n\n    return [...Array.from(elements.nodes), ...Array.from(elements.edges)];\n  };\n\n  const getTooltipContent = (node) => {\n    const vertexData = node.data('vertexData') || {};\n    const type = node.data('type');\n    \n    let content = `<div class=\"tooltip-header\">${type}</div><div class=\"tooltip-body\">`;\n    \n    // Add common fields if they exist\n    if (vertexData.name) {\n      content += `<div>Name: ${vertexData.name}</div>`;\n    }\n    if (vertexData.asn) {\n      content += `<div>ASN: ${vertexData.asn}</div>`;\n    }\n\n    // Add type-specific fields\n    switch (type) {\n      case 'ls_node_extended':\n        if (vertexData.protocol) {\n          content += `<div>Protocol: ${vertexData.protocol}</div>`;\n        }\n        if (vertexData.sids && vertexData.sids.length > 0) {\n          content += `<div>SIDs: ${vertexData.sids.join(', ')}</div>`;\n        }\n        break;\n      \n      case 'ls_prefix':\n        if (vertexData.prefix) {\n          content += `<div>Prefix: ${vertexData.prefix}</div>`;\n        }\n        break;\n\n      case 'ebgp_peer_v6':\n        if (vertexData.peer_ip) {\n          content += `<div>Peer IP: ${vertexData.peer_ip}</div>`;\n        }\n        break;\n    }\n    \n    content += '</div>';\n    return content;\n  };\n\n  // Setup hover events after the graph is rendered\n  useEffect(() => {\n    if (cyRef.current) {\n      const cy = cyRef.current;\n      \n      // Remove any existing event listeners\n      cy.nodes().unbind('mouseover mouseout');\n      \n      // Add hover events\n      cy.nodes().bind('mouseover', (event) => {\n        const node = event.target;\n        const type = node.data('type');\n        const label = node.data('label');\n        \n        // Create and position the tooltip div\n        let tooltip = document.getElementById('cy-tooltip');\n        if (!tooltip) {\n          tooltip = document.createElement('div');\n          tooltip.setAttribute('id', 'cy-tooltip');\n          document.body.appendChild(tooltip);\n        }\n        \n        tooltip.innerHTML = `\n          <div class=\"tooltip-header\">${type}</div>\n          <div class=\"tooltip-body\">\n            <div>ID: ${label}</div>\n          </div>\n        `;\n        \n        const renderedPosition = node.renderedPosition();\n        const zoom = cy.zoom();\n        \n        tooltip.style.display = 'block';\n        tooltip.style.left = `${renderedPosition.x}px`;\n        tooltip.style.top = `${renderedPosition.y - 70}px`; // Offset above the node\n      });\n      \n      cy.nodes().bind('mouseout', () => {\n        const tooltip = document.getElementById('cy-tooltip');\n        if (tooltip) {\n          tooltip.style.display = 'none';\n        }\n      });\n    }\n  }, [graphData]);\n\n  const layout = {\n    name: 'cola',\n    animate: true,\n    refresh: 1,\n    maxSimulationTime: 3000,\n    nodeSpacing: 100,\n    edgeLength: 200,\n    randomize: true,\n    infinite: true\n  };\n\n  const stylesheet = [\n    {\n      selector: 'node',\n      style: {\n        'background-color': (ele) => {\n          const nodeType = ele.data('type');\n          return nodeType.includes('prefix') ? COLORS.prefix : COLORS.node;\n        },\n        'label': 'data(label)',\n        'width': 30,\n        'height': 30,\n        'color': COLORS.text,\n        'text-outline-width': 2,\n        'text-outline-color': '#fff',\n        'font-family': 'Consolas',\n        'font-size': '10px',\n        'text-wrap': 'wrap',\n        'text-max-width': '100px'\n      }\n    },\n    {\n      selector: 'edge',\n      style: {\n        'width': 1.5,\n        'line-color': COLORS.edge,\n        'curve-style': 'bezier',\n        'target-arrow-color': COLORS.edge,\n        'target-arrow-shape': 'triangle',\n        'arrow-scale': 0.8\n      }\n    }\n  ];\n\n  if (isLoading) {\n    return <div style={{ padding: '20px', fontFamily: 'Consolas' }}>Loading graph data...</div>;\n  }\n\n  if (error) {\n    return <div style={{ padding: '20px', color: 'red', fontFamily: 'Consolas' }}>{error}</div>;\n  }\n\n  if (!graphData) {\n    return <div style={{ padding: '20px', fontFamily: 'Consolas' }}>Select a graph to visualize</div>;\n  }\n\n  return (\n    <div className=\"network-graph-container\">\n      <Legend />\n      <div className=\"graph-area\">\n        <CytoscapeComponent\n          elements={graphData}\n          layout={layout}\n          stylesheet={stylesheet}\n          cy={(cy) => { cyRef.current = cy; }}\n          style={{ width: '100%', height: '100%' }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default NetworkGraph; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}