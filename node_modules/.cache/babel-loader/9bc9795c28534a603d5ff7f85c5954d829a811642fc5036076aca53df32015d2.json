{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar PowerEdge = function () {\n  function PowerEdge(source, target, type) {\n    this.source = source;\n    this.target = target;\n    this.type = type;\n  }\n  return PowerEdge;\n}();\nexports.PowerEdge = PowerEdge;\nvar Configuration = function () {\n  function Configuration(n, edges, linkAccessor, rootGroup) {\n    var _this = this;\n    this.linkAccessor = linkAccessor;\n    this.modules = new Array(n);\n    this.roots = [];\n    if (rootGroup) {\n      this.initModulesFromGroup(rootGroup);\n    } else {\n      this.roots.push(new ModuleSet());\n      for (var i = 0; i < n; ++i) this.roots[0].add(this.modules[i] = new Module(i));\n    }\n    this.R = edges.length;\n    edges.forEach(function (e) {\n      var s = _this.modules[linkAccessor.getSourceIndex(e)],\n        t = _this.modules[linkAccessor.getTargetIndex(e)],\n        type = linkAccessor.getType(e);\n      s.outgoing.add(type, t);\n      t.incoming.add(type, s);\n    });\n  }\n  Configuration.prototype.initModulesFromGroup = function (group) {\n    var moduleSet = new ModuleSet();\n    this.roots.push(moduleSet);\n    for (var i = 0; i < group.leaves.length; ++i) {\n      var node = group.leaves[i];\n      var module = new Module(node.id);\n      this.modules[node.id] = module;\n      moduleSet.add(module);\n    }\n    if (group.groups) {\n      for (var j = 0; j < group.groups.length; ++j) {\n        var child = group.groups[j];\n        var definition = {};\n        for (var prop in child) if (prop !== \"leaves\" && prop !== \"groups\" && child.hasOwnProperty(prop)) definition[prop] = child[prop];\n        moduleSet.add(new Module(-1 - j, new LinkSets(), new LinkSets(), this.initModulesFromGroup(child), definition));\n      }\n    }\n    return moduleSet;\n  };\n  Configuration.prototype.merge = function (a, b, k) {\n    if (k === void 0) {\n      k = 0;\n    }\n    var inInt = a.incoming.intersection(b.incoming),\n      outInt = a.outgoing.intersection(b.outgoing);\n    var children = new ModuleSet();\n    children.add(a);\n    children.add(b);\n    var m = new Module(this.modules.length, outInt, inInt, children);\n    this.modules.push(m);\n    var update = function (s, i, o) {\n      s.forAll(function (ms, linktype) {\n        ms.forAll(function (n) {\n          var nls = n[i];\n          nls.add(linktype, m);\n          nls.remove(linktype, a);\n          nls.remove(linktype, b);\n          a[o].remove(linktype, n);\n          b[o].remove(linktype, n);\n        });\n      });\n    };\n    update(outInt, \"incoming\", \"outgoing\");\n    update(inInt, \"outgoing\", \"incoming\");\n    this.R -= inInt.count() + outInt.count();\n    this.roots[k].remove(a);\n    this.roots[k].remove(b);\n    this.roots[k].add(m);\n    return m;\n  };\n  Configuration.prototype.rootMerges = function (k) {\n    if (k === void 0) {\n      k = 0;\n    }\n    var rs = this.roots[k].modules();\n    var n = rs.length;\n    var merges = new Array(n * (n - 1));\n    var ctr = 0;\n    for (var i = 0, i_ = n - 1; i < i_; ++i) {\n      for (var j = i + 1; j < n; ++j) {\n        var a = rs[i],\n          b = rs[j];\n        merges[ctr] = {\n          id: ctr,\n          nEdges: this.nEdges(a, b),\n          a: a,\n          b: b\n        };\n        ctr++;\n      }\n    }\n    return merges;\n  };\n  Configuration.prototype.greedyMerge = function () {\n    for (var i = 0; i < this.roots.length; ++i) {\n      if (this.roots[i].modules().length < 2) continue;\n      var ms = this.rootMerges(i).sort(function (a, b) {\n        return a.nEdges == b.nEdges ? a.id - b.id : a.nEdges - b.nEdges;\n      });\n      var m = ms[0];\n      if (m.nEdges >= this.R) continue;\n      this.merge(m.a, m.b, i);\n      return true;\n    }\n  };\n  Configuration.prototype.nEdges = function (a, b) {\n    var inInt = a.incoming.intersection(b.incoming),\n      outInt = a.outgoing.intersection(b.outgoing);\n    return this.R - inInt.count() - outInt.count();\n  };\n  Configuration.prototype.getGroupHierarchy = function (retargetedEdges) {\n    var _this = this;\n    var groups = [];\n    var root = {};\n    toGroups(this.roots[0], root, groups);\n    var es = this.allEdges();\n    es.forEach(function (e) {\n      var a = _this.modules[e.source];\n      var b = _this.modules[e.target];\n      retargetedEdges.push(new PowerEdge(typeof a.gid === \"undefined\" ? e.source : groups[a.gid], typeof b.gid === \"undefined\" ? e.target : groups[b.gid], e.type));\n    });\n    return groups;\n  };\n  Configuration.prototype.allEdges = function () {\n    var es = [];\n    Configuration.getEdges(this.roots[0], es);\n    return es;\n  };\n  Configuration.getEdges = function (modules, es) {\n    modules.forAll(function (m) {\n      m.getEdges(es);\n      Configuration.getEdges(m.children, es);\n    });\n  };\n  return Configuration;\n}();\nexports.Configuration = Configuration;\nfunction toGroups(modules, group, groups) {\n  modules.forAll(function (m) {\n    if (m.isLeaf()) {\n      if (!group.leaves) group.leaves = [];\n      group.leaves.push(m.id);\n    } else {\n      var g = group;\n      m.gid = groups.length;\n      if (!m.isIsland() || m.isPredefined()) {\n        g = {\n          id: m.gid\n        };\n        if (m.isPredefined()) for (var prop in m.definition) g[prop] = m.definition[prop];\n        if (!group.groups) group.groups = [];\n        group.groups.push(m.gid);\n        groups.push(g);\n      }\n      toGroups(m.children, g, groups);\n    }\n  });\n}\nvar Module = function () {\n  function Module(id, outgoing, incoming, children, definition) {\n    if (outgoing === void 0) {\n      outgoing = new LinkSets();\n    }\n    if (incoming === void 0) {\n      incoming = new LinkSets();\n    }\n    if (children === void 0) {\n      children = new ModuleSet();\n    }\n    this.id = id;\n    this.outgoing = outgoing;\n    this.incoming = incoming;\n    this.children = children;\n    this.definition = definition;\n  }\n  Module.prototype.getEdges = function (es) {\n    var _this = this;\n    this.outgoing.forAll(function (ms, edgetype) {\n      ms.forAll(function (target) {\n        es.push(new PowerEdge(_this.id, target.id, edgetype));\n      });\n    });\n  };\n  Module.prototype.isLeaf = function () {\n    return this.children.count() === 0;\n  };\n  Module.prototype.isIsland = function () {\n    return this.outgoing.count() === 0 && this.incoming.count() === 0;\n  };\n  Module.prototype.isPredefined = function () {\n    return typeof this.definition !== \"undefined\";\n  };\n  return Module;\n}();\nexports.Module = Module;\nfunction intersection(m, n) {\n  var i = {};\n  for (var v in m) if (v in n) i[v] = m[v];\n  return i;\n}\nvar ModuleSet = function () {\n  function ModuleSet() {\n    this.table = {};\n  }\n  ModuleSet.prototype.count = function () {\n    return Object.keys(this.table).length;\n  };\n  ModuleSet.prototype.intersection = function (other) {\n    var result = new ModuleSet();\n    result.table = intersection(this.table, other.table);\n    return result;\n  };\n  ModuleSet.prototype.intersectionCount = function (other) {\n    return this.intersection(other).count();\n  };\n  ModuleSet.prototype.contains = function (id) {\n    return id in this.table;\n  };\n  ModuleSet.prototype.add = function (m) {\n    this.table[m.id] = m;\n  };\n  ModuleSet.prototype.remove = function (m) {\n    delete this.table[m.id];\n  };\n  ModuleSet.prototype.forAll = function (f) {\n    for (var mid in this.table) {\n      f(this.table[mid]);\n    }\n  };\n  ModuleSet.prototype.modules = function () {\n    var vs = [];\n    this.forAll(function (m) {\n      if (!m.isPredefined()) vs.push(m);\n    });\n    return vs;\n  };\n  return ModuleSet;\n}();\nexports.ModuleSet = ModuleSet;\nvar LinkSets = function () {\n  function LinkSets() {\n    this.sets = {};\n    this.n = 0;\n  }\n  LinkSets.prototype.count = function () {\n    return this.n;\n  };\n  LinkSets.prototype.contains = function (id) {\n    var result = false;\n    this.forAllModules(function (m) {\n      if (!result && m.id == id) {\n        result = true;\n      }\n    });\n    return result;\n  };\n  LinkSets.prototype.add = function (linktype, m) {\n    var s = linktype in this.sets ? this.sets[linktype] : this.sets[linktype] = new ModuleSet();\n    s.add(m);\n    ++this.n;\n  };\n  LinkSets.prototype.remove = function (linktype, m) {\n    var ms = this.sets[linktype];\n    ms.remove(m);\n    if (ms.count() === 0) {\n      delete this.sets[linktype];\n    }\n    --this.n;\n  };\n  LinkSets.prototype.forAll = function (f) {\n    for (var linktype in this.sets) {\n      f(this.sets[linktype], Number(linktype));\n    }\n  };\n  LinkSets.prototype.forAllModules = function (f) {\n    this.forAll(function (ms, lt) {\n      return ms.forAll(f);\n    });\n  };\n  LinkSets.prototype.intersection = function (other) {\n    var result = new LinkSets();\n    this.forAll(function (ms, lt) {\n      if (lt in other.sets) {\n        var i = ms.intersection(other.sets[lt]),\n          n = i.count();\n        if (n > 0) {\n          result.sets[lt] = i;\n          result.n += n;\n        }\n      }\n    });\n    return result;\n  };\n  return LinkSets;\n}();\nexports.LinkSets = LinkSets;\nfunction intersectionCount(m, n) {\n  return Object.keys(intersection(m, n)).length;\n}\nfunction getGroups(nodes, links, la, rootGroup) {\n  var n = nodes.length,\n    c = new Configuration(n, links, la, rootGroup);\n  while (c.greedyMerge());\n  var powerEdges = [];\n  var g = c.getGroupHierarchy(powerEdges);\n  powerEdges.forEach(function (e) {\n    var f = function (end) {\n      var g = e[end];\n      if (typeof g == \"number\") e[end] = nodes[g];\n    };\n    f(\"source\");\n    f(\"target\");\n  });\n  return {\n    groups: g,\n    powerEdges: powerEdges\n  };\n}\nexports.getGroups = getGroups;","map":{"version":3,"names":["PowerEdge","source","target","type","exports","Configuration","n","edges","linkAccessor","rootGroup","_this","modules","Array","roots","initModulesFromGroup","push","ModuleSet","i","add","Module","R","length","forEach","e","s","getSourceIndex","t","getTargetIndex","getType","outgoing","incoming","prototype","group","moduleSet","leaves","node","module","id","groups","j","child","definition","prop","hasOwnProperty","LinkSets","merge","a","b","k","inInt","intersection","outInt","children","m","update","o","forAll","ms","linktype","nls","remove","count","rootMerges","rs","merges","ctr","i_","nEdges","greedyMerge","sort","getGroupHierarchy","retargetedEdges","root","toGroups","es","allEdges","gid","getEdges","isLeaf","g","isIsland","isPredefined","edgetype","v","table","Object","keys","other","result","intersectionCount","contains","f","mid","vs","sets","forAllModules","Number","lt","getGroups","nodes","links","la","c","powerEdges","end"],"sources":["/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/node_modules/webcola/WebCola/src/powergraph.ts"],"sourcesContent":["import {LinkAccessor} from './linklengths'\r\n\r\nexport interface LinkTypeAccessor<Link> extends LinkAccessor<Link> {\r\n        // return a unique identifier for the type of the link\r\n        getType(l: Link): number;\r\n    }\r\n\r\n    export class PowerEdge {\r\n        constructor(\r\n            public source: any,\r\n            public target: any,\r\n            public type: number) { }\r\n    }\r\n\r\n    export class Configuration<Link> {\r\n        // canonical list of modules.\r\n        // Initialized to a module for each leaf node, such that the ids and indexes of the module in the array match the indexes of the nodes in links\r\n        // Modules created through merges are appended to the end of this.\r\n        modules: Module[];\r\n        // top level modules and candidates for merges\r\n        roots: ModuleSet[];\r\n        // remaining edge count\r\n        R: number;\r\n        constructor(n: number, edges: Link[], private linkAccessor: LinkTypeAccessor<Link>, rootGroup?: any[]) {\r\n            this.modules = new Array(n);\r\n            this.roots = [];\r\n            if (rootGroup) {\r\n                this.initModulesFromGroup(rootGroup);\r\n            } else {\r\n                this.roots.push(new ModuleSet());\r\n                for (var i = 0; i < n; ++i)\r\n                    this.roots[0].add(this.modules[i] = new Module(i));\r\n            }\r\n            this.R = edges.length;\r\n            edges.forEach(e => {\r\n                var s = this.modules[linkAccessor.getSourceIndex(e)],\r\n                    t = this.modules[linkAccessor.getTargetIndex(e)],\r\n                    type = linkAccessor.getType(e);\r\n                s.outgoing.add(type, t);\r\n                t.incoming.add(type, s);\r\n            });\r\n        }\r\n\r\n        private initModulesFromGroup(group): ModuleSet {\r\n            var moduleSet = new ModuleSet();\r\n            this.roots.push(moduleSet);\r\n            for (var i = 0; i < group.leaves.length; ++i) {\r\n                var node = group.leaves[i];\r\n                var module = new Module(node.id);\r\n                this.modules[node.id] = module;\r\n                moduleSet.add(module);\r\n            }\r\n            if (group.groups) {\r\n                for (var j = 0; j < group.groups.length; ++j) {\r\n                    var child = group.groups[j];\r\n                    // Propagate group properties (like padding, stiffness, ...) as module definition so that the generated power graph group will inherit it\r\n                    var definition = {};\r\n                    for (var prop in child)\r\n                        if (prop !== \"leaves\" && prop !== \"groups\" && child.hasOwnProperty(prop))\r\n                            definition[prop] = child[prop];\r\n                    // Use negative module id to avoid clashes between predefined and generated modules\r\n                    moduleSet.add(new Module(-1-j, new LinkSets(), new LinkSets(), this.initModulesFromGroup(child), definition));\r\n                }\r\n            }\r\n            return moduleSet;\r\n         }\r\n\r\n        // merge modules a and b keeping track of their power edges and removing the from roots\r\n        merge(a: Module, b: Module, k: number = 0): Module {\r\n            var inInt = a.incoming.intersection(b.incoming),\r\n                outInt = a.outgoing.intersection(b.outgoing);\r\n            var children = new ModuleSet();\r\n            children.add(a);\r\n            children.add(b);\r\n            var m = new Module(this.modules.length, outInt, inInt, children);\r\n            this.modules.push(m);\r\n            var update = (s: LinkSets, i: string, o: string) => {\r\n                s.forAll((ms, linktype) => {\r\n                    ms.forAll(n => {\r\n                        var nls = <LinkSets>n[i];\r\n                        nls.add(linktype, m);\r\n                        nls.remove(linktype, a);\r\n                        nls.remove(linktype, b);\r\n                        (<LinkSets>a[o]).remove(linktype, n);\r\n                        (<LinkSets>b[o]).remove(linktype, n);\r\n                    });\r\n                });\r\n            };\r\n            update(outInt, \"incoming\", \"outgoing\");\r\n            update(inInt, \"outgoing\", \"incoming\");\r\n            this.R -= inInt.count() + outInt.count();\r\n            this.roots[k].remove(a);\r\n            this.roots[k].remove(b);\r\n            this.roots[k].add(m);\r\n            return m;\r\n        }\r\n\r\n        private rootMerges(k: number = 0): {\r\n            id: number;\r\n            nEdges: number;\r\n            a: Module;\r\n            b: Module;\r\n        }[] {\r\n            var rs = this.roots[k].modules();\r\n            var n = rs.length;\r\n            var merges = new Array(n * (n - 1));\r\n            var ctr = 0;\r\n            for (var i = 0, i_ = n - 1; i < i_; ++i) {\r\n                for (var j = i+1; j < n; ++j) {\r\n                    var a = rs[i], b = rs[j];\r\n                    merges[ctr] = { id: ctr, nEdges: this.nEdges(a, b), a: a, b: b };\r\n                    ctr++;\r\n                }\r\n            }\r\n            return merges;\r\n        }\r\n\r\n        greedyMerge(): boolean {\r\n            for (var i = 0; i < this.roots.length; ++i) {\r\n                // Handle single nested module case\r\n                if (this.roots[i].modules().length < 2) continue;\r\n\r\n                // find the merge that allows for the most edges to be removed.  secondary ordering based on arbitrary id (for predictability)\r\n                var ms = this.rootMerges(i).sort((a, b) => a.nEdges == b.nEdges ? a.id - b.id : a.nEdges - b.nEdges);\r\n                var m = ms[0];\r\n                if (m.nEdges >= this.R) continue;\r\n                this.merge(m.a, m.b, i);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        private nEdges(a: Module, b: Module): number {\r\n            var inInt = a.incoming.intersection(b.incoming),\r\n                outInt = a.outgoing.intersection(b.outgoing);\r\n            return this.R - inInt.count() - outInt.count();\r\n        }\r\n\r\n        getGroupHierarchy(retargetedEdges: PowerEdge[]): any[]{\r\n            var groups = [];\r\n            var root = {};\r\n            toGroups(this.roots[0], root, groups);\r\n            var es = this.allEdges();\r\n            es.forEach(e => {\r\n                var a = this.modules[e.source];\r\n                var b = this.modules[e.target];\r\n                retargetedEdges.push(new PowerEdge(\r\n                    typeof a.gid === \"undefined\" ? e.source : groups[a.gid],\r\n                    typeof b.gid === \"undefined\" ? e.target : groups[b.gid],\r\n                    e.type\r\n                ));\r\n            });\r\n            return groups;\r\n        }\r\n\r\n        allEdges(): PowerEdge[] {\r\n            var es = [];\r\n            Configuration.getEdges(this.roots[0], es);\r\n            return es;\r\n        }\r\n\r\n        static getEdges(modules: ModuleSet, es: PowerEdge[]) {\r\n            modules.forAll(m => {\r\n                m.getEdges(es);\r\n                Configuration.getEdges(m.children, es);\r\n            });\r\n        }\r\n    }\r\n\r\n    function toGroups(modules: ModuleSet, group, groups) {\r\n        modules.forAll(m => {\r\n            if (m.isLeaf()) {\r\n                if (!group.leaves) group.leaves = [];\r\n                group.leaves.push(m.id);\r\n            } else {\r\n                var g = group;\r\n                m.gid = groups.length;\r\n                if (!m.isIsland() || m.isPredefined()) {\r\n                    g = { id: m.gid };\r\n                    if (m.isPredefined())\r\n                        // Apply original group properties\r\n                        for (var prop in m.definition)\r\n                            g[prop] = m.definition[prop];\r\n                    if (!group.groups) group.groups = [];\r\n                    group.groups.push(m.gid);\r\n                    groups.push(g);\r\n                }\r\n                toGroups(m.children, g, groups);\r\n            }\r\n        });\r\n    }\r\n\r\n    export class Module {\r\n        gid: number;\r\n\r\n        constructor(\r\n            public id: number,\r\n            public outgoing: LinkSets = new LinkSets(),\r\n            public incoming: LinkSets = new LinkSets(),\r\n            public children: ModuleSet = new ModuleSet(),\r\n            public definition?: any) { }\r\n\r\n        getEdges(es: PowerEdge[]) {\r\n            this.outgoing.forAll((ms, edgetype) => {\r\n                ms.forAll(target => {\r\n                    es.push(new PowerEdge(this.id, target.id, edgetype));\r\n                });\r\n            });\r\n        }\r\n\r\n        isLeaf() {\r\n            return this.children.count() === 0;\r\n        }\r\n\r\n        isIsland() {\r\n            return this.outgoing.count() === 0 && this.incoming.count() === 0;\r\n        }\r\n\r\n        isPredefined(): boolean {\r\n            return typeof this.definition !== \"undefined\";\r\n        }\r\n    }\r\n\r\n    function intersection(m: any, n: any): any {\r\n        var i = {};\r\n        for (var v in m) if (v in n) i[v] = m[v];\r\n        return i;\r\n    }\r\n\r\n    export class ModuleSet {\r\n        table: any = {};\r\n        count() {\r\n            return Object.keys(this.table).length;\r\n        }\r\n        intersection(other: ModuleSet): ModuleSet {\r\n            var result = new ModuleSet();\r\n            result.table = intersection(this.table, other.table);\r\n            return result;\r\n        }\r\n        intersectionCount(other: ModuleSet): number {\r\n            return this.intersection(other).count();\r\n        }\r\n        contains(id: number): boolean {\r\n            return id in this.table;\r\n        }\r\n        add(m: Module): void {\r\n            this.table[m.id] = m;\r\n        }\r\n        remove(m: Module): void {\r\n            delete this.table[m.id];\r\n        }\r\n        forAll(f: (m: Module) => void) {\r\n            for (var mid in this.table) {\r\n                f(this.table[mid]);\r\n            }\r\n        }\r\n        modules(): Module[] {\r\n            var vs = [];\r\n            this.forAll(m => {\r\n                if (!m.isPredefined())\r\n                    vs.push(m);\r\n            });\r\n            return vs;\r\n        }\r\n    }\r\n\r\n    export class LinkSets {\r\n        sets: any = {};\r\n        n: number = 0;\r\n        count(): number {\r\n            return this.n;\r\n        }\r\n        contains(id: number) {\r\n            var result = false;\r\n            this.forAllModules(m => {\r\n                if (!result && m.id == id) {\r\n                    result = true;\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n        add(linktype: number, m: Module) {\r\n            var s: ModuleSet = linktype in this.sets ? this.sets[linktype] : this.sets[linktype] = new ModuleSet();\r\n            s.add(m);\r\n            ++this.n;\r\n        }\r\n        remove(linktype: number, m: Module) {\r\n            var ms = <ModuleSet>this.sets[linktype];\r\n            ms.remove(m);\r\n            if (ms.count() === 0) {\r\n                delete this.sets[linktype];\r\n            }\r\n            --this.n;\r\n        }\r\n        forAll(f: (ms: ModuleSet, linktype: number) => void) {\r\n            for (var linktype in this.sets) {\r\n                f(<ModuleSet>this.sets[linktype], Number(linktype));\r\n            }\r\n        }\r\n        forAllModules(f: (m: Module) => void) {\r\n            this.forAll((ms, lt) => ms.forAll(f));\r\n        }\r\n        intersection(other: LinkSets): LinkSets {\r\n            var result: LinkSets = new LinkSets();\r\n            this.forAll((ms, lt) => {\r\n                if (lt in other.sets) {\r\n                    var i = ms.intersection(other.sets[lt]),\r\n                        n = i.count();\r\n                    if (n > 0) {\r\n                        result.sets[lt] = i;\r\n                        result.n += n;\r\n                    }\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function intersectionCount(m: any, n: any): number {\r\n        return Object.keys(intersection(m, n)).length\r\n    }\r\n\r\n    export function getGroups<Link>(nodes: any[], links: Link[], la: LinkTypeAccessor<Link>, rootGroup?: any[]): { groups: any[]; powerEdges: PowerEdge[] } {\r\n        var n = nodes.length,\r\n            c = new Configuration(n, links, la, rootGroup);\r\n        while (c.greedyMerge());\r\n        var powerEdges: PowerEdge[] = [];\r\n        var g = c.getGroupHierarchy(powerEdges);\r\n        powerEdges.forEach(function (e) {\r\n            var f = (end) => {\r\n                var g = e[end];\r\n                if (typeof g == \"number\") e[end] = nodes[g];\r\n            };\r\n            f(\"source\");\r\n            f(\"target\");\r\n        });\r\n        return { groups: g, powerEdges: powerEdges };\r\n    }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}