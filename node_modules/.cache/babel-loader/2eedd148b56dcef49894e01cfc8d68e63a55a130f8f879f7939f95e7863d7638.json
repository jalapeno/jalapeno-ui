{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar packingOptions = {\n  PADDING: 10,\n  GOLDEN_SECTION: (1 + Math.sqrt(5)) / 2,\n  FLOAT_EPSILON: 0.0001,\n  MAX_INERATIONS: 100\n};\nfunction applyPacking(graphs, w, h, node_size, desired_ratio, centerGraph) {\n  if (desired_ratio === void 0) {\n    desired_ratio = 1;\n  }\n  if (centerGraph === void 0) {\n    centerGraph = true;\n  }\n  var init_x = 0,\n    init_y = 0,\n    svg_width = w,\n    svg_height = h,\n    desired_ratio = typeof desired_ratio !== 'undefined' ? desired_ratio : 1,\n    node_size = typeof node_size !== 'undefined' ? node_size : 0,\n    real_width = 0,\n    real_height = 0,\n    min_width = 0,\n    global_bottom = 0,\n    line = [];\n  if (graphs.length == 0) return;\n  calculate_bb(graphs);\n  apply(graphs, desired_ratio);\n  if (centerGraph) {\n    put_nodes_to_right_positions(graphs);\n  }\n  function calculate_bb(graphs) {\n    graphs.forEach(function (g) {\n      calculate_single_bb(g);\n    });\n    function calculate_single_bb(graph) {\n      var min_x = Number.MAX_VALUE,\n        min_y = Number.MAX_VALUE,\n        max_x = 0,\n        max_y = 0;\n      graph.array.forEach(function (v) {\n        var w = typeof v.width !== 'undefined' ? v.width : node_size;\n        var h = typeof v.height !== 'undefined' ? v.height : node_size;\n        w /= 2;\n        h /= 2;\n        max_x = Math.max(v.x + w, max_x);\n        min_x = Math.min(v.x - w, min_x);\n        max_y = Math.max(v.y + h, max_y);\n        min_y = Math.min(v.y - h, min_y);\n      });\n      graph.width = max_x - min_x;\n      graph.height = max_y - min_y;\n    }\n  }\n  function put_nodes_to_right_positions(graphs) {\n    graphs.forEach(function (g) {\n      var center = {\n        x: 0,\n        y: 0\n      };\n      g.array.forEach(function (node) {\n        center.x += node.x;\n        center.y += node.y;\n      });\n      center.x /= g.array.length;\n      center.y /= g.array.length;\n      var corner = {\n        x: center.x - g.width / 2,\n        y: center.y - g.height / 2\n      };\n      var offset = {\n        x: g.x - corner.x + svg_width / 2 - real_width / 2,\n        y: g.y - corner.y + svg_height / 2 - real_height / 2\n      };\n      g.array.forEach(function (node) {\n        node.x += offset.x;\n        node.y += offset.y;\n      });\n    });\n  }\n  function apply(data, desired_ratio) {\n    var curr_best_f = Number.POSITIVE_INFINITY;\n    var curr_best = 0;\n    data.sort(function (a, b) {\n      return b.height - a.height;\n    });\n    min_width = data.reduce(function (a, b) {\n      return a.width < b.width ? a.width : b.width;\n    });\n    var left = x1 = min_width;\n    var right = x2 = get_entire_width(data);\n    var iterationCounter = 0;\n    var f_x1 = Number.MAX_VALUE;\n    var f_x2 = Number.MAX_VALUE;\n    var flag = -1;\n    var dx = Number.MAX_VALUE;\n    var df = Number.MAX_VALUE;\n    while (dx > min_width || df > packingOptions.FLOAT_EPSILON) {\n      if (flag != 1) {\n        var x1 = right - (right - left) / packingOptions.GOLDEN_SECTION;\n        var f_x1 = step(data, x1);\n      }\n      if (flag != 0) {\n        var x2 = left + (right - left) / packingOptions.GOLDEN_SECTION;\n        var f_x2 = step(data, x2);\n      }\n      dx = Math.abs(x1 - x2);\n      df = Math.abs(f_x1 - f_x2);\n      if (f_x1 < curr_best_f) {\n        curr_best_f = f_x1;\n        curr_best = x1;\n      }\n      if (f_x2 < curr_best_f) {\n        curr_best_f = f_x2;\n        curr_best = x2;\n      }\n      if (f_x1 > f_x2) {\n        left = x1;\n        x1 = x2;\n        f_x1 = f_x2;\n        flag = 1;\n      } else {\n        right = x2;\n        x2 = x1;\n        f_x2 = f_x1;\n        flag = 0;\n      }\n      if (iterationCounter++ > 100) {\n        break;\n      }\n    }\n    step(data, curr_best);\n  }\n  function step(data, max_width) {\n    line = [];\n    real_width = 0;\n    real_height = 0;\n    global_bottom = init_y;\n    for (var i = 0; i < data.length; i++) {\n      var o = data[i];\n      put_rect(o, max_width);\n    }\n    return Math.abs(get_real_ratio() - desired_ratio);\n  }\n  function put_rect(rect, max_width) {\n    var parent = undefined;\n    for (var i = 0; i < line.length; i++) {\n      if (line[i].space_left >= rect.height && line[i].x + line[i].width + rect.width + packingOptions.PADDING - max_width <= packingOptions.FLOAT_EPSILON) {\n        parent = line[i];\n        break;\n      }\n    }\n    line.push(rect);\n    if (parent !== undefined) {\n      rect.x = parent.x + parent.width + packingOptions.PADDING;\n      rect.y = parent.bottom;\n      rect.space_left = rect.height;\n      rect.bottom = rect.y;\n      parent.space_left -= rect.height + packingOptions.PADDING;\n      parent.bottom += rect.height + packingOptions.PADDING;\n    } else {\n      rect.y = global_bottom;\n      global_bottom += rect.height + packingOptions.PADDING;\n      rect.x = init_x;\n      rect.bottom = rect.y;\n      rect.space_left = rect.height;\n    }\n    if (rect.y + rect.height - real_height > -packingOptions.FLOAT_EPSILON) real_height = rect.y + rect.height - init_y;\n    if (rect.x + rect.width - real_width > -packingOptions.FLOAT_EPSILON) real_width = rect.x + rect.width - init_x;\n  }\n  ;\n  function get_entire_width(data) {\n    var width = 0;\n    data.forEach(function (d) {\n      return width += d.width + packingOptions.PADDING;\n    });\n    return width;\n  }\n  function get_real_ratio() {\n    return real_width / real_height;\n  }\n}\nexports.applyPacking = applyPacking;\nfunction separateGraphs(nodes, links) {\n  var marks = {};\n  var ways = {};\n  var graphs = [];\n  var clusters = 0;\n  for (var i = 0; i < links.length; i++) {\n    var link = links[i];\n    var n1 = link.source;\n    var n2 = link.target;\n    if (ways[n1.index]) ways[n1.index].push(n2);else ways[n1.index] = [n2];\n    if (ways[n2.index]) ways[n2.index].push(n1);else ways[n2.index] = [n1];\n  }\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    if (marks[node.index]) continue;\n    explore_node(node, true);\n  }\n  function explore_node(n, is_new) {\n    if (marks[n.index] !== undefined) return;\n    if (is_new) {\n      clusters++;\n      graphs.push({\n        array: []\n      });\n    }\n    marks[n.index] = clusters;\n    graphs[clusters - 1].array.push(n);\n    var adjacent = ways[n.index];\n    if (!adjacent) return;\n    for (var j = 0; j < adjacent.length; j++) {\n      explore_node(adjacent[j], false);\n    }\n  }\n  return graphs;\n}\nexports.separateGraphs = separateGraphs;","map":{"version":3,"names":["packingOptions","PADDING","GOLDEN_SECTION","Math","sqrt","FLOAT_EPSILON","MAX_INERATIONS","applyPacking","graphs","w","h","node_size","desired_ratio","centerGraph","init_x","init_y","svg_width","svg_height","real_width","real_height","min_width","global_bottom","line","length","calculate_bb","apply","put_nodes_to_right_positions","forEach","g","calculate_single_bb","graph","min_x","Number","MAX_VALUE","min_y","max_x","max_y","array","v","width","height","max","x","min","y","center","node","corner","offset","data","curr_best_f","POSITIVE_INFINITY","curr_best","sort","a","b","reduce","left","x1","right","x2","get_entire_width","iterationCounter","f_x1","f_x2","flag","dx","df","step","abs","max_width","i","o","put_rect","get_real_ratio","rect","parent","undefined","space_left","push","bottom","d","exports","separateGraphs","nodes","links","marks","ways","clusters","link","n1","source","n2","target","index","explore_node","n","is_new","adjacent","j"],"sources":["/Users/brucemcdougall/go/jalapeno-github/jalapeno-ui/node_modules/webcola/WebCola/src/handledisconnected.ts"],"sourcesContent":["    var packingOptions = {\r\n        PADDING: 10,\r\n        GOLDEN_SECTION: (1 + Math.sqrt(5)) / 2,\r\n        FLOAT_EPSILON: 0.0001,\r\n        MAX_INERATIONS: 100\r\n    };\r\n\r\n    // assign x, y to nodes while using box packing algorithm for disconnected graphs\r\n    export function applyPacking(graphs:Array<any>, w, h, node_size, desired_ratio = 1, centerGraph = true) {\r\n\r\n        var init_x = 0,\r\n            init_y = 0,\r\n\r\n            svg_width = w,\r\n            svg_height = h,\r\n\r\n            desired_ratio = typeof desired_ratio !== 'undefined' ? desired_ratio : 1,\r\n            node_size = typeof node_size !== 'undefined' ? node_size : 0,\r\n\r\n            real_width = 0,\r\n            real_height = 0,\r\n            min_width = 0,\r\n\r\n            global_bottom = 0,\r\n            line = [];\r\n\r\n        if (graphs.length == 0)\r\n            return;\r\n\r\n        /// that would take care of single nodes problem\r\n        // graphs.forEach(function (g) {\r\n        //     if (g.array.length == 1) {\r\n        //         g.array[0].x = 0;\r\n        //         g.array[0].y = 0;\r\n        //     }\r\n        // });\r\n\r\n        calculate_bb(graphs);\r\n        apply(graphs, desired_ratio);\r\n        if(centerGraph) {\r\n            put_nodes_to_right_positions(graphs);\r\n        }\r\n\r\n        // get bounding boxes for all separate graphs\r\n        function calculate_bb(graphs) {\r\n\r\n            graphs.forEach(function (g) {\r\n                calculate_single_bb(g)\r\n            });\r\n\r\n            function calculate_single_bb(graph) {\r\n                var min_x = Number.MAX_VALUE, min_y = Number.MAX_VALUE,\r\n                    max_x = 0, max_y = 0;\r\n\r\n                graph.array.forEach(function (v) {\r\n                    var w = typeof v.width !== 'undefined' ? v.width : node_size;\r\n                    var h = typeof v.height !== 'undefined' ? v.height : node_size;\r\n                    w /= 2;\r\n                    h /= 2;\r\n                    max_x = Math.max(v.x + w, max_x);\r\n                    min_x = Math.min(v.x - w, min_x);\r\n                    max_y = Math.max(v.y + h, max_y);\r\n                    min_y = Math.min(v.y - h, min_y);\r\n                });\r\n\r\n                graph.width = max_x - min_x;\r\n                graph.height = max_y - min_y;\r\n            }\r\n        }\r\n\r\n        //function plot(data, left, right, opt_x, opt_y) {\r\n        //    // plot the cost function\r\n        //    var plot_svg = d3.select(\"body\").append(\"svg\")\r\n        //        .attr(\"width\", function () { return 2 * (right - left); })\r\n        //        .attr(\"height\", 200);\r\n\r\n\r\n        //    var x = d3.time.scale().range([0, 2 * (right - left)]);\r\n\r\n        //    var xAxis = d3.svg.axis().scale(x).orient(\"bottom\");\r\n        //    plot_svg.append(\"g\").attr(\"class\", \"x axis\")\r\n        //        .attr(\"transform\", \"translate(0, 199)\")\r\n        //        .call(xAxis);\r\n\r\n        //    var lastX = 0;\r\n        //    var lastY = 0;\r\n        //    var value = 0;\r\n        //    for (var r = left; r < right; r += 1) {\r\n        //        value = step(data, r);\r\n        //        // value = 1;\r\n\r\n        //        plot_svg.append(\"line\").attr(\"x1\", 2 * (lastX - left))\r\n        //            .attr(\"y1\", 200 - 30 * lastY)\r\n        //            .attr(\"x2\", 2 * r - 2 * left)\r\n        //            .attr(\"y2\", 200 - 30 * value)\r\n        //            .style(\"stroke\", \"rgb(6,120,155)\");\r\n\r\n        //        lastX = r;\r\n        //        lastY = value;\r\n        //    }\r\n\r\n        //    plot_svg.append(\"circle\").attr(\"cx\", 2 * opt_x - 2 * left).attr(\"cy\", 200 - 30 * opt_y)\r\n        //        .attr(\"r\", 5).style('fill', \"rgba(0,0,0,0.5)\");\r\n\r\n        //}\r\n\r\n        // actual assigning of position to nodes\r\n        function put_nodes_to_right_positions(graphs) {\r\n            graphs.forEach(function (g) {\r\n                // calculate current graph center:\r\n                var center = { x: 0, y: 0 };\r\n\r\n                g.array.forEach(function (node) {\r\n                    center.x += node.x;\r\n                    center.y += node.y;\r\n                });\r\n\r\n                center.x /= g.array.length;\r\n                center.y /= g.array.length;\r\n\r\n                // calculate current top left corner:\r\n                var corner = { x: center.x - g.width / 2, y: center.y - g.height / 2 };\r\n                var offset = { x: g.x - corner.x + svg_width / 2 - real_width / 2, y: g.y - corner.y + svg_height / 2 - real_height / 2};\r\n\r\n                // put nodes:\r\n                g.array.forEach(function (node) {\r\n                    node.x += offset.x;\r\n                    node.y += offset.y;\r\n                });\r\n            });\r\n        }\r\n\r\n        // starts box packing algorithm\r\n        // desired ratio is 1 by default\r\n        function apply(data, desired_ratio) {\r\n            var curr_best_f = Number.POSITIVE_INFINITY;\r\n            var curr_best = 0;\r\n            data.sort(function (a, b) { return b.height - a.height; });\r\n\r\n            min_width = data.reduce(function (a, b) {\r\n                return a.width < b.width ? a.width : b.width;\r\n            });\r\n\r\n            var left = x1 = min_width;\r\n            var right = x2 = get_entire_width(data);\r\n            var iterationCounter = 0;\r\n\r\n            var f_x1 = Number.MAX_VALUE;\r\n            var f_x2 = Number.MAX_VALUE;\r\n            var flag = -1; // determines which among f_x1 and f_x2 to recompute\r\n\r\n\r\n            var dx = Number.MAX_VALUE;\r\n            var df = Number.MAX_VALUE;\r\n\r\n            while ((dx > min_width) || df > packingOptions.FLOAT_EPSILON) {\r\n\r\n                if (flag != 1) {\r\n                    var x1 = right - (right - left) / packingOptions.GOLDEN_SECTION;\r\n                    var f_x1 = step(data, x1);\r\n                }\r\n                if (flag != 0) {\r\n                    var x2 = left + (right - left) / packingOptions.GOLDEN_SECTION;\r\n                    var f_x2 = step(data, x2);\r\n                }\r\n\r\n                dx = Math.abs(x1 - x2);\r\n                df = Math.abs(f_x1 - f_x2);\r\n\r\n                if (f_x1 < curr_best_f) {\r\n                    curr_best_f = f_x1;\r\n                    curr_best = x1;\r\n                }\r\n\r\n                if (f_x2 < curr_best_f) {\r\n                    curr_best_f = f_x2;\r\n                    curr_best = x2;\r\n                }\r\n\r\n                if (f_x1 > f_x2) {\r\n                    left = x1;\r\n                    x1 = x2;\r\n                    f_x1 = f_x2;\r\n                    flag = 1;\r\n                } else {\r\n                    right = x2;\r\n                    x2 = x1;\r\n                    f_x2 = f_x1;\r\n                    flag = 0;\r\n                }\r\n\r\n                if (iterationCounter++ > 100) {\r\n                    break;\r\n                }\r\n            }\r\n            // plot(data, min_width, get_entire_width(data), curr_best, curr_best_f);\r\n            step(data, curr_best);\r\n        }\r\n\r\n        // one iteration of the optimization method\r\n        // (gives a proper, but not necessarily optimal packing)\r\n        function step(data, max_width) {\r\n            line = [];\r\n            real_width = 0;\r\n            real_height = 0;\r\n            global_bottom = init_y;\r\n\r\n            for (var i = 0; i < data.length; i++) {\r\n                var o = data[i];\r\n                put_rect(o, max_width);\r\n            }\r\n\r\n            return Math.abs(get_real_ratio() - desired_ratio);\r\n        }\r\n\r\n        // looking for a position to one box\r\n        function put_rect(rect, max_width) {\r\n\r\n\r\n            var parent = undefined;\r\n\r\n            for (var i = 0; i < line.length; i++) {\r\n                if ((line[i].space_left >= rect.height) && (line[i].x + line[i].width + rect.width + packingOptions.PADDING - max_width) <= packingOptions.FLOAT_EPSILON) {\r\n                    parent = line[i];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            line.push(rect);\r\n\r\n            if (parent !== undefined) {\r\n                rect.x = parent.x + parent.width + packingOptions.PADDING;\r\n                rect.y = parent.bottom;\r\n                rect.space_left = rect.height;\r\n                rect.bottom = rect.y;\r\n                parent.space_left -= rect.height + packingOptions.PADDING;\r\n                parent.bottom += rect.height + packingOptions.PADDING;\r\n            } else {\r\n                rect.y = global_bottom;\r\n                global_bottom += rect.height + packingOptions.PADDING;\r\n                rect.x = init_x;\r\n                rect.bottom = rect.y;\r\n                rect.space_left = rect.height;\r\n            }\r\n\r\n            if (rect.y + rect.height - real_height > -packingOptions.FLOAT_EPSILON) real_height = rect.y + rect.height - init_y;\r\n            if (rect.x + rect.width - real_width > -packingOptions.FLOAT_EPSILON) real_width = rect.x + rect.width - init_x;\r\n        };\r\n\r\n        function get_entire_width(data) {\r\n            var width = 0;\r\n            data.forEach(function (d) { return width += d.width + packingOptions.PADDING; });\r\n            return width;\r\n        }\r\n\r\n        function get_real_ratio() {\r\n            return (real_width / real_height);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * connected components of graph\r\n     * returns an array of {}\r\n     */\r\n    export function separateGraphs(nodes, links) {\r\n        var marks = {};\r\n        var ways = {};\r\n        var graphs = [];\r\n        var clusters = 0;\r\n\r\n        for (var i = 0; i < links.length; i++) {\r\n            var link = links[i];\r\n            var n1 = link.source;\r\n            var n2 = link.target;\r\n            if (ways[n1.index])\r\n                ways[n1.index].push(n2);\r\n            else\r\n                ways[n1.index] = [n2];\r\n\r\n            if (ways[n2.index])\r\n                ways[n2.index].push(n1);\r\n            else\r\n                ways[n2.index] = [n1];\r\n        }\r\n\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            var node = nodes[i];\r\n            if (marks[node.index]) continue;\r\n            explore_node(node, true);\r\n        }\r\n\r\n        function explore_node(n, is_new) {\r\n            if (marks[n.index] !== undefined) return;\r\n            if (is_new) {\r\n                clusters++;\r\n                graphs.push({ array: [] });\r\n            }\r\n            marks[n.index] = clusters;\r\n            graphs[clusters - 1].array.push(n);\r\n            var adjacent = ways[n.index];\r\n            if (!adjacent) return;\r\n\r\n            for (var j = 0; j < adjacent.length; j++) {\r\n                explore_node(adjacent[j], false);\r\n            }\r\n        }\r\n\r\n        return graphs;\r\n    }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}